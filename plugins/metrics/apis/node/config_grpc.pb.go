// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/metrics/apis/node/config.proto

package node

import (
	context "context"
	driverutil "github.com/rancher/opni/pkg/plugins/driverutil"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeConfiguration_GetDefaultConfiguration_FullMethodName   = "/node.metrics.config.NodeConfiguration/GetDefaultConfiguration"
	NodeConfiguration_SetDefaultConfiguration_FullMethodName   = "/node.metrics.config.NodeConfiguration/SetDefaultConfiguration"
	NodeConfiguration_ResetDefaultConfiguration_FullMethodName = "/node.metrics.config.NodeConfiguration/ResetDefaultConfiguration"
	NodeConfiguration_GetConfiguration_FullMethodName          = "/node.metrics.config.NodeConfiguration/GetConfiguration"
	NodeConfiguration_SetConfiguration_FullMethodName          = "/node.metrics.config.NodeConfiguration/SetConfiguration"
	NodeConfiguration_ResetConfiguration_FullMethodName        = "/node.metrics.config.NodeConfiguration/ResetConfiguration"
	NodeConfiguration_ConfigurationHistory_FullMethodName      = "/node.metrics.config.NodeConfiguration/ConfigurationHistory"
)

// NodeConfigurationClient is the client API for NodeConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeConfigurationClient interface {
	GetDefaultConfiguration(ctx context.Context, in *driverutil.GetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error)
	SetDefaultConfiguration(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetDefaultConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetConfiguration(ctx context.Context, in *NodeGetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error)
	SetConfiguration(ctx context.Context, in *NodeSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetConfiguration(ctx context.Context, in *NodeResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ConfigurationHistory(ctx context.Context, in *ConfigurationHistoryRequest, opts ...grpc.CallOption) (*ConfigurationHistoryResponse, error)
}

type nodeConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeConfigurationClient(cc grpc.ClientConnInterface) NodeConfigurationClient {
	return &nodeConfigurationClient{cc}
}

func (c *nodeConfigurationClient) GetDefaultConfiguration(ctx context.Context, in *driverutil.GetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error) {
	out := new(MetricsCapabilityConfig)
	err := c.cc.Invoke(ctx, NodeConfiguration_GetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) SetDefaultConfiguration(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_SetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) ResetDefaultConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_ResetDefaultConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) GetConfiguration(ctx context.Context, in *NodeGetRequest, opts ...grpc.CallOption) (*MetricsCapabilityConfig, error) {
	out := new(MetricsCapabilityConfig)
	err := c.cc.Invoke(ctx, NodeConfiguration_GetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) SetConfiguration(ctx context.Context, in *NodeSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_SetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) ResetConfiguration(ctx context.Context, in *NodeResetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NodeConfiguration_ResetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeConfigurationClient) ConfigurationHistory(ctx context.Context, in *ConfigurationHistoryRequest, opts ...grpc.CallOption) (*ConfigurationHistoryResponse, error) {
	out := new(ConfigurationHistoryResponse)
	err := c.cc.Invoke(ctx, NodeConfiguration_ConfigurationHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeConfigurationServer is the server API for NodeConfiguration service.
// All implementations must embed UnimplementedNodeConfigurationServer
// for forward compatibility
type NodeConfigurationServer interface {
	GetDefaultConfiguration(context.Context, *driverutil.GetRequest) (*MetricsCapabilityConfig, error)
	SetDefaultConfiguration(context.Context, *SetRequest) (*emptypb.Empty, error)
	ResetDefaultConfiguration(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetConfiguration(context.Context, *NodeGetRequest) (*MetricsCapabilityConfig, error)
	SetConfiguration(context.Context, *NodeSetRequest) (*emptypb.Empty, error)
	ResetConfiguration(context.Context, *NodeResetRequest) (*emptypb.Empty, error)
	ConfigurationHistory(context.Context, *ConfigurationHistoryRequest) (*ConfigurationHistoryResponse, error)
	mustEmbedUnimplementedNodeConfigurationServer()
}

// UnimplementedNodeConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedNodeConfigurationServer struct {
}

func (UnimplementedNodeConfigurationServer) GetDefaultConfiguration(context.Context, *driverutil.GetRequest) (*MetricsCapabilityConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) SetDefaultConfiguration(context.Context, *SetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) ResetDefaultConfiguration(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetDefaultConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) GetConfiguration(context.Context, *NodeGetRequest) (*MetricsCapabilityConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) SetConfiguration(context.Context, *NodeSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) ResetConfiguration(context.Context, *NodeResetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetConfiguration not implemented")
}
func (UnimplementedNodeConfigurationServer) ConfigurationHistory(context.Context, *ConfigurationHistoryRequest) (*ConfigurationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationHistory not implemented")
}
func (UnimplementedNodeConfigurationServer) mustEmbedUnimplementedNodeConfigurationServer() {}

// UnsafeNodeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeConfigurationServer will
// result in compilation errors.
type UnsafeNodeConfigurationServer interface {
	mustEmbedUnimplementedNodeConfigurationServer()
}

func RegisterNodeConfigurationServer(s grpc.ServiceRegistrar, srv NodeConfigurationServer) {
	s.RegisterService(&NodeConfiguration_ServiceDesc, srv)
}

func _NodeConfiguration_GetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(driverutil.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).GetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_GetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).GetDefaultConfiguration(ctx, req.(*driverutil.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_SetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).SetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_SetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).SetDefaultConfiguration(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_ResetDefaultConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).ResetDefaultConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_ResetDefaultConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).ResetDefaultConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).GetConfiguration(ctx, req.(*NodeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_SetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).SetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_SetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).SetConfiguration(ctx, req.(*NodeSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_ResetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).ResetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_ResetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).ResetConfiguration(ctx, req.(*NodeResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeConfiguration_ConfigurationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeConfigurationServer).ConfigurationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeConfiguration_ConfigurationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeConfigurationServer).ConfigurationHistory(ctx, req.(*ConfigurationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeConfiguration_ServiceDesc is the grpc.ServiceDesc for NodeConfiguration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeConfiguration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.metrics.config.NodeConfiguration",
	HandlerType: (*NodeConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultConfiguration",
			Handler:    _NodeConfiguration_GetDefaultConfiguration_Handler,
		},
		{
			MethodName: "SetDefaultConfiguration",
			Handler:    _NodeConfiguration_SetDefaultConfiguration_Handler,
		},
		{
			MethodName: "ResetDefaultConfiguration",
			Handler:    _NodeConfiguration_ResetDefaultConfiguration_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _NodeConfiguration_GetConfiguration_Handler,
		},
		{
			MethodName: "SetConfiguration",
			Handler:    _NodeConfiguration_SetConfiguration_Handler,
		},
		{
			MethodName: "ResetConfiguration",
			Handler:    _NodeConfiguration_ResetConfiguration_Handler,
		},
		{
			MethodName: "ConfigurationHistory",
			Handler:    _NodeConfiguration_ConfigurationHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/metrics/apis/node/config.proto",
}
