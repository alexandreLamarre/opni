syntax = "proto3";
option go_package = "github.com/rancher/opni/plugins/metrics/pkg/apis/node";

import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "github.com/rancher/opni/pkg/config/v1beta1/agent_config.proto";
import "github.com/rancher/opni/pkg/apis/capability/v1/capability.proto";
import "google/protobuf/duration.proto";

import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";

package node.metrics;

// The NodeMetricsCapability service serves implementation-specific config
// for metrics capability nodes.
// Served as a stream API extension.
service NodeMetricsCapability {
  rpc Sync(SyncRequest) returns (SyncResponse);
}

// The NodeConfiguration service allows for per-node configuration of the
// metrics capability.
// Served as a management API extension.
service NodeConfiguration {
  rpc GetDefaultConfiguration(google.protobuf.Empty) returns (MetricsCapabilitySpec) {
    option (google.api.http) = {
      get: "/node_config"
    };
  }
  rpc SetDefaultConfiguration(MetricsCapabilitySpec) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/node_config"
      body: "*"
    };
  }
  rpc GetNodeConfiguration(core.Reference) returns (MetricsCapabilitySpec) {
    option (google.api.http) = {
      get: "/node_config/{id}"
    };
  }
  rpc SetNodeConfiguration(NodeConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/node_config/{node.id}"
      body: "*"
    };
  }
}

message NodeConfigRequest {
  core.Reference node = 1;

  // Can be set to nil to use the default configuration for this node.
  MetricsCapabilitySpec spec = 2;
}

message MetricsCapabilityConfig {
  bool enabled = 1;
  // If enabled is false, conditions may contain a list of relevant status
  // messages describing why the capability is disabled.
  repeated string conditions = 2;
  MetricsCapabilitySpec spec = 3;
}

message MetricsCapabilitySpec {
  config.v1beta1.RulesSpec rules = 1;
  PrometheusSpec prometheus = 2;
  OTELSpec otel = 3;
}

message PrometheusSpec {
  // default: quay.io/prometheus/prometheus:latest
  string image = 1;
  // can be one of: ["externalPromOperator"]
  string deploymentStrategy = 2;
}

message OTELSpec {
  repeated ScrapeConfig additionalScrapeConfigs = 1;
  WALConfig wal = 2;
  // When set to true uses daemon set kubelet metrics
  // otherwise we expect users to have kube-state-metrics
  // installed to collect kubelet metrics. 
  //
  // Cannot have this enabled and have kube-state-metrics
  // 
  // default: false
  optional bool hostMetrics = 3;
  // when set to false uses agent remote-write
  optional bool useOTLP = 4;
}

message WALConfig {
  bool enabled = 1;
  int64 bufferSize = 2;
  google.protobuf.Duration truncateFrequency = 3;
}

message SyncRequest {
  MetricsCapabilityConfig currentConfig = 1;
}

message ScrapeConfig {
  string jobName = 1;
  repeated string targets = 2;
  string scrapeInterval = 3;
}

enum ConfigStatus {
  Unknown = 0;
  UpToDate = 1;
  NeedsUpdate = 2;
}

message SyncResponse {
  ConfigStatus configStatus = 1;
  MetricsCapabilityConfig updatedConfig = 2;
}