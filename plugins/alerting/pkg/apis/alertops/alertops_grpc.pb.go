// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/alerting/pkg/apis/alertops/alertops.proto

package alertops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AlertingAdmin_GetClusterConfiguration_FullMethodName = "/alerting.ops.AlertingAdmin/GetClusterConfiguration"
	AlertingAdmin_ConfigureCluster_FullMethodName        = "/alerting.ops.AlertingAdmin/ConfigureCluster"
	AlertingAdmin_GetClusterStatus_FullMethodName        = "/alerting.ops.AlertingAdmin/GetClusterStatus"
	AlertingAdmin_InstallCluster_FullMethodName          = "/alerting.ops.AlertingAdmin/InstallCluster"
	AlertingAdmin_UninstallCluster_FullMethodName        = "/alerting.ops.AlertingAdmin/UninstallCluster"
)

// AlertingAdminClient is the client API for AlertingAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertingAdminClient interface {
	GetClusterConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterConfiguration, error)
	// Install/Uninstall the alerting cluster by setting enabled=true/false
	ConfigureCluster(ctx context.Context, in *ClusterConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetClusterStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InstallStatus, error)
	InstallCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UninstallCluster(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alertingAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertingAdminClient(cc grpc.ClientConnInterface) AlertingAdminClient {
	return &alertingAdminClient{cc}
}

func (c *alertingAdminClient) GetClusterConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ClusterConfiguration, error) {
	out := new(ClusterConfiguration)
	err := c.cc.Invoke(ctx, AlertingAdmin_GetClusterConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) ConfigureCluster(ctx context.Context, in *ClusterConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlertingAdmin_ConfigureCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) GetClusterStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InstallStatus, error) {
	out := new(InstallStatus)
	err := c.cc.Invoke(ctx, AlertingAdmin_GetClusterStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) InstallCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlertingAdmin_InstallCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertingAdminClient) UninstallCluster(ctx context.Context, in *UninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AlertingAdmin_UninstallCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertingAdminServer is the server API for AlertingAdmin service.
// All implementations must embed UnimplementedAlertingAdminServer
// for forward compatibility
type AlertingAdminServer interface {
	GetClusterConfiguration(context.Context, *emptypb.Empty) (*ClusterConfiguration, error)
	// Install/Uninstall the alerting cluster by setting enabled=true/false
	ConfigureCluster(context.Context, *ClusterConfiguration) (*emptypb.Empty, error)
	GetClusterStatus(context.Context, *emptypb.Empty) (*InstallStatus, error)
	InstallCluster(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	UninstallCluster(context.Context, *UninstallRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAlertingAdminServer()
}

// UnimplementedAlertingAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAlertingAdminServer struct {
}

func (UnimplementedAlertingAdminServer) GetClusterConfiguration(context.Context, *emptypb.Empty) (*ClusterConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfiguration not implemented")
}
func (UnimplementedAlertingAdminServer) ConfigureCluster(context.Context, *ClusterConfiguration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureCluster not implemented")
}
func (UnimplementedAlertingAdminServer) GetClusterStatus(context.Context, *emptypb.Empty) (*InstallStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterStatus not implemented")
}
func (UnimplementedAlertingAdminServer) InstallCluster(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallCluster not implemented")
}
func (UnimplementedAlertingAdminServer) UninstallCluster(context.Context, *UninstallRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallCluster not implemented")
}
func (UnimplementedAlertingAdminServer) mustEmbedUnimplementedAlertingAdminServer() {}

// UnsafeAlertingAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertingAdminServer will
// result in compilation errors.
type UnsafeAlertingAdminServer interface {
	mustEmbedUnimplementedAlertingAdminServer()
}

func RegisterAlertingAdminServer(s grpc.ServiceRegistrar, srv AlertingAdminServer) {
	s.RegisterService(&AlertingAdmin_ServiceDesc, srv)
}

func _AlertingAdmin_GetClusterConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).GetClusterConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingAdmin_GetClusterConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).GetClusterConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_ConfigureCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).ConfigureCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingAdmin_ConfigureCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).ConfigureCluster(ctx, req.(*ClusterConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_GetClusterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).GetClusterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingAdmin_GetClusterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).GetClusterStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_InstallCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).InstallCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingAdmin_InstallCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).InstallCluster(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertingAdmin_UninstallCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertingAdminServer).UninstallCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AlertingAdmin_UninstallCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertingAdminServer).UninstallCluster(ctx, req.(*UninstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertingAdmin_ServiceDesc is the grpc.ServiceDesc for AlertingAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertingAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.ops.AlertingAdmin",
	HandlerType: (*AlertingAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterConfiguration",
			Handler:    _AlertingAdmin_GetClusterConfiguration_Handler,
		},
		{
			MethodName: "ConfigureCluster",
			Handler:    _AlertingAdmin_ConfigureCluster_Handler,
		},
		{
			MethodName: "GetClusterStatus",
			Handler:    _AlertingAdmin_GetClusterStatus_Handler,
		},
		{
			MethodName: "InstallCluster",
			Handler:    _AlertingAdmin_InstallCluster_Handler,
		},
		{
			MethodName: "UninstallCluster",
			Handler:    _AlertingAdmin_UninstallCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/alerting/pkg/apis/alertops/alertops.proto",
}

const (
	ConfigReconciler_ConnectRemoteSyncer_FullMethodName = "/alerting.ops.ConfigReconciler/ConnectRemoteSyncer"
)

// ConfigReconcilerClient is the client API for ConfigReconciler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigReconcilerClient interface {
	ConnectRemoteSyncer(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (ConfigReconciler_ConnectRemoteSyncerClient, error)
}

type configReconcilerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigReconcilerClient(cc grpc.ClientConnInterface) ConfigReconcilerClient {
	return &configReconcilerClient{cc}
}

func (c *configReconcilerClient) ConnectRemoteSyncer(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (ConfigReconciler_ConnectRemoteSyncerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigReconciler_ServiceDesc.Streams[0], ConfigReconciler_ConnectRemoteSyncer_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configReconcilerConnectRemoteSyncerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigReconciler_ConnectRemoteSyncerClient interface {
	Recv() (*SyncRequest, error)
	grpc.ClientStream
}

type configReconcilerConnectRemoteSyncerClient struct {
	grpc.ClientStream
}

func (x *configReconcilerConnectRemoteSyncerClient) Recv() (*SyncRequest, error) {
	m := new(SyncRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigReconcilerServer is the server API for ConfigReconciler service.
// All implementations must embed UnimplementedConfigReconcilerServer
// for forward compatibility
type ConfigReconcilerServer interface {
	ConnectRemoteSyncer(*ConnectRequest, ConfigReconciler_ConnectRemoteSyncerServer) error
	mustEmbedUnimplementedConfigReconcilerServer()
}

// UnimplementedConfigReconcilerServer must be embedded to have forward compatible implementations.
type UnimplementedConfigReconcilerServer struct {
}

func (UnimplementedConfigReconcilerServer) ConnectRemoteSyncer(*ConnectRequest, ConfigReconciler_ConnectRemoteSyncerServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectRemoteSyncer not implemented")
}
func (UnimplementedConfigReconcilerServer) mustEmbedUnimplementedConfigReconcilerServer() {}

// UnsafeConfigReconcilerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigReconcilerServer will
// result in compilation errors.
type UnsafeConfigReconcilerServer interface {
	mustEmbedUnimplementedConfigReconcilerServer()
}

func RegisterConfigReconcilerServer(s grpc.ServiceRegistrar, srv ConfigReconcilerServer) {
	s.RegisterService(&ConfigReconciler_ServiceDesc, srv)
}

func _ConfigReconciler_ConnectRemoteSyncer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigReconcilerServer).ConnectRemoteSyncer(m, &configReconcilerConnectRemoteSyncerServer{stream})
}

type ConfigReconciler_ConnectRemoteSyncerServer interface {
	Send(*SyncRequest) error
	grpc.ServerStream
}

type configReconcilerConnectRemoteSyncerServer struct {
	grpc.ServerStream
}

func (x *configReconcilerConnectRemoteSyncerServer) Send(m *SyncRequest) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigReconciler_ServiceDesc is the grpc.ServiceDesc for ConfigReconciler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigReconciler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.ops.ConfigReconciler",
	HandlerType: (*ConfigReconcilerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectRemoteSyncer",
			Handler:       _ConfigReconciler_ConnectRemoteSyncer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/rancher/opni/plugins/alerting/pkg/apis/alertops/alertops.proto",
}
