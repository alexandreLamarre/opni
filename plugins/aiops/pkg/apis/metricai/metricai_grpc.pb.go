// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/aiops/pkg/apis/metricai/metricai.proto

package metricai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricAI_ListJobs_FullMethodName     = "/metricai.MetricAI/ListJobs"
	MetricAI_SubmitJob_FullMethodName    = "/metricai.MetricAI/SubmitJob"
	MetricAI_DeleteJobs_FullMethodName   = "/metricai.MetricAI/DeleteJobs"
	MetricAI_GetJobResult_FullMethodName = "/metricai.MetricAI/GetJobResult"
)

// MetricAIClient is the client API for MetricAI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricAIClient interface {
	ListJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricAIJobList, error)
	SubmitJob(ctx context.Context, in *MetricAIJobRequest, opts ...grpc.CallOption) (*MetricAIJobSubmitStatus, error)
	DeleteJobs(ctx context.Context, in *MetricAIJobId, opts ...grpc.CallOption) (*MetricAIJobDeleteStatus, error)
	GetJobResult(ctx context.Context, in *MetricAIJobId, opts ...grpc.CallOption) (*MetricAIGetJobResult, error)
}

type metricAIClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricAIClient(cc grpc.ClientConnInterface) MetricAIClient {
	return &metricAIClient{cc}
}

func (c *metricAIClient) ListJobs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricAIJobList, error) {
	out := new(MetricAIJobList)
	err := c.cc.Invoke(ctx, MetricAI_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) SubmitJob(ctx context.Context, in *MetricAIJobRequest, opts ...grpc.CallOption) (*MetricAIJobSubmitStatus, error) {
	out := new(MetricAIJobSubmitStatus)
	err := c.cc.Invoke(ctx, MetricAI_SubmitJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) DeleteJobs(ctx context.Context, in *MetricAIJobId, opts ...grpc.CallOption) (*MetricAIJobDeleteStatus, error) {
	out := new(MetricAIJobDeleteStatus)
	err := c.cc.Invoke(ctx, MetricAI_DeleteJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricAIClient) GetJobResult(ctx context.Context, in *MetricAIJobId, opts ...grpc.CallOption) (*MetricAIGetJobResult, error) {
	out := new(MetricAIGetJobResult)
	err := c.cc.Invoke(ctx, MetricAI_GetJobResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricAIServer is the server API for MetricAI service.
// All implementations must embed UnimplementedMetricAIServer
// for forward compatibility
type MetricAIServer interface {
	ListJobs(context.Context, *emptypb.Empty) (*MetricAIJobList, error)
	SubmitJob(context.Context, *MetricAIJobRequest) (*MetricAIJobSubmitStatus, error)
	DeleteJobs(context.Context, *MetricAIJobId) (*MetricAIJobDeleteStatus, error)
	GetJobResult(context.Context, *MetricAIJobId) (*MetricAIGetJobResult, error)
	mustEmbedUnimplementedMetricAIServer()
}

// UnimplementedMetricAIServer must be embedded to have forward compatible implementations.
type UnimplementedMetricAIServer struct {
}

func (UnimplementedMetricAIServer) ListJobs(context.Context, *emptypb.Empty) (*MetricAIJobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedMetricAIServer) SubmitJob(context.Context, *MetricAIJobRequest) (*MetricAIJobSubmitStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedMetricAIServer) DeleteJobs(context.Context, *MetricAIJobId) (*MetricAIJobDeleteStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobs not implemented")
}
func (UnimplementedMetricAIServer) GetJobResult(context.Context, *MetricAIJobId) (*MetricAIGetJobResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobResult not implemented")
}
func (UnimplementedMetricAIServer) mustEmbedUnimplementedMetricAIServer() {}

// UnsafeMetricAIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricAIServer will
// result in compilation errors.
type UnsafeMetricAIServer interface {
	mustEmbedUnimplementedMetricAIServer()
}

func RegisterMetricAIServer(s grpc.ServiceRegistrar, srv MetricAIServer) {
	s.RegisterService(&MetricAI_ServiceDesc, srv)
}

func _MetricAI_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).ListJobs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_SubmitJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).SubmitJob(ctx, req.(*MetricAIJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_DeleteJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).DeleteJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_DeleteJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).DeleteJobs(ctx, req.(*MetricAIJobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricAI_GetJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricAIJobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricAIServer).GetJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricAI_GetJobResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricAIServer).GetJobResult(ctx, req.(*MetricAIJobId))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricAI_ServiceDesc is the grpc.ServiceDesc for MetricAI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricAI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metricai.MetricAI",
	HandlerType: (*MetricAIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _MetricAI_ListJobs_Handler,
		},
		{
			MethodName: "SubmitJob",
			Handler:    _MetricAI_SubmitJob_Handler,
		},
		{
			MethodName: "DeleteJobs",
			Handler:    _MetricAI_DeleteJobs_Handler,
		},
		{
			MethodName: "GetJobResult",
			Handler:    _MetricAI_GetJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/aiops/pkg/apis/metricai/metricai.proto",
}
