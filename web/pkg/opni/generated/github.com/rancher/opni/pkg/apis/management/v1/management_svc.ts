// @generated by service-generator v0.0.1 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file github.com/rancher/opni/pkg/apis/management/v1/management.proto (package management, syntax proto3)
/* eslint-disable */

import { APIExtensionInfoList, CapabilityInstallerRequest, CapabilityInstallerResponse, CapabilityInstallRequest, CapabilityList, CapabilityStatusRequest, CapabilityUninstallCancelRequest, CapabilityUninstallRequest, CertsInfoResponse, CreateBootstrapTokenRequest, DashboardSettings, EditClusterRequest, GatewayConfig, ListClustersRequest, UpdateConfigRequest, WatchClustersRequest, WatchEvent } from "./management_pb";
import { BootstrapToken, BootstrapTokenList, Cluster, ClusterHealthStatus, ClusterList, HealthStatus, Reference, ReferenceList, Role, RoleBinding, RoleBindingList, RoleList, SubjectAccessRequest, TaskStatus } from "../../core/v1/core_pb";
import { axios } from "@pkg/opni/utils/axios";
import { Socket } from "@pkg/opni/utils/socket";
import { EVENT_CONNECT_ERROR, EVENT_CONNECTED, EVENT_CONNECTING, EVENT_DISCONNECT_ERROR, EVENT_MESSAGE } from "@shell/utils/socket";
import { Empty } from "@bufbuild/protobuf";
import { InstallResponse, NodeCapabilityStatus } from "../../capability/v1/capability_pb";


export async function CreateBootstrapToken(input: CreateBootstrapTokenRequest): Promise<BootstrapToken> {
  try {
    return (await axios.request({
    transformResponse: resp => BootstrapToken.fromBinary(new Uint8Array(resp)),
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/tokens`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function RevokeBootstrapToken(input: Reference): Promise<void> {
  try {
    return (await axios.request({
      method: 'delete',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/tokens/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function ListBootstrapTokens(): Promise<BootstrapTokenList> {
  try {
    return (await axios.request({
    transformResponse: resp => BootstrapTokenList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/tokens`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetBootstrapToken(input: Reference): Promise<BootstrapToken> {
  try {
    return (await axios.request({
    transformResponse: resp => BootstrapToken.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/tokens/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function ListClusters(input: ListClustersRequest): Promise<ClusterList> {
  try {
    return (await axios.request({
    transformResponse: resp => ClusterList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export function WatchClusters(input: WatchClustersRequest, callback: (data: WatchEvent) => void): () => Promise<any> {
  const socket = new Socket('/opni-api/Management/watch/clusters', true);
  Object.assign(socket, { frameTimeout: null })
  socket.addEventListener(EVENT_MESSAGE, (e: any) => {
    const event = e.detail;
    if (event.data) {
      callback(WatchEvent.fromBinary(new Uint8Array(event.data)));
    }
  });
  socket.addEventListener(EVENT_CONNECTING, () => {
    socket.socket.binaryType = 'arraybuffer';
  }, { once: true });
  socket.addEventListener(EVENT_CONNECTED, () => {
    socket.send(input.toBinary());
  }, { once: true });
  socket.addEventListener(EVENT_CONNECT_ERROR, (e) => {
    console.error(e);
  })
  socket.addEventListener(EVENT_DISCONNECT_ERROR, (e) => {
    console.error(e);
  })
  socket.connect();
  return () => {
    return socket.disconnect(null);
  };
}


export async function DeleteCluster(input: Reference): Promise<void> {
  try {
    return (await axios.request({
      method: 'delete',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CertsInfo(): Promise<CertsInfoResponse> {
  try {
    return (await axios.request({
    transformResponse: resp => CertsInfoResponse.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/certs`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetCluster(input: Reference): Promise<Cluster> {
  try {
    return (await axios.request({
    transformResponse: resp => Cluster.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetClusterHealthStatus(input: Reference): Promise<HealthStatus> {
  try {
    return (await axios.request({
    transformResponse: resp => HealthStatus.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.id}/health`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export function WatchClusterHealthStatus(input: Empty, callback: (data: ClusterHealthStatus) => void): () => Promise<any> {
  const socket = new Socket('/opni-api/Management/watch/health', true);
  Object.assign(socket, { frameTimeout: null })
  socket.addEventListener(EVENT_MESSAGE, (e: any) => {
    const event = e.detail;
    if (event.data) {
      callback(ClusterHealthStatus.fromBinary(new Uint8Array(event.data)));
    }
  });
  socket.addEventListener(EVENT_CONNECTING, () => {
    socket.socket.binaryType = 'arraybuffer';
  }, { once: true });
  socket.addEventListener(EVENT_CONNECTED, () => {
    socket.send(input.toBinary());
  }, { once: true });
  socket.addEventListener(EVENT_CONNECT_ERROR, (e) => {
    console.error(e);
  })
  socket.addEventListener(EVENT_DISCONNECT_ERROR, (e) => {
    console.error(e);
  })
  socket.connect();
  return () => {
    return socket.disconnect(null);
  };
}


export async function EditCluster(input: EditClusterRequest): Promise<Cluster> {
  try {
    return (await axios.request({
    transformResponse: resp => Cluster.fromBinary(new Uint8Array(resp)),
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.cluster.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CreateRole(input: Role): Promise<void> {
  try {
    return (await axios.request({
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/roles`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function UpdateRole(input: Role): Promise<void> {
  try {
    return (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/roles`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function DeleteRole(input: Reference): Promise<void> {
  try {
    return (await axios.request({
      method: 'delete',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/roles/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetRole(input: Reference): Promise<Role> {
  try {
    return (await axios.request({
    transformResponse: resp => Role.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/roles/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CreateRoleBinding(input: RoleBinding): Promise<void> {
  try {
    return (await axios.request({
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/rolebindings`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function UpdateRoleBinding(input: RoleBinding): Promise<void> {
  try {
    return (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/rolebindings`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function DeleteRoleBinding(input: Reference): Promise<void> {
  try {
    return (await axios.request({
      method: 'delete',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/rolebindings/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetRoleBinding(input: Reference): Promise<RoleBinding> {
  try {
    return (await axios.request({
    transformResponse: resp => RoleBinding.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/rolebindings/${input.id}`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function ListRoles(): Promise<RoleList> {
  try {
    return (await axios.request({
    transformResponse: resp => RoleList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/roles`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function ListRoleBindings(): Promise<RoleBindingList> {
  try {
    return (await axios.request({
    transformResponse: resp => RoleBindingList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/rolebindings`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function SubjectAccess(input: SubjectAccessRequest): Promise<ReferenceList> {
  try {
    return (await axios.request({
    transformResponse: resp => ReferenceList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/subjectaccess`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function APIExtensions(): Promise<APIExtensionInfoList> {
  try {
    return (await axios.request({
    transformResponse: resp => APIExtensionInfoList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/apiextensions`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetConfig(): Promise<GatewayConfig> {
  try {
    return (await axios.request({
    transformResponse: resp => GatewayConfig.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/config`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function UpdateConfig(input: UpdateConfigRequest): Promise<void> {
  try {
    return (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/config`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function ListCapabilities(): Promise<CapabilityList> {
  try {
    return (await axios.request({
    transformResponse: resp => CapabilityList.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/capabilities`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CapabilityInstaller(input: CapabilityInstallerRequest): Promise<CapabilityInstallerResponse> {
  try {
    return (await axios.request({
    transformResponse: resp => CapabilityInstallerResponse.fromBinary(new Uint8Array(resp)),
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/capabilities/${input.name}/installer`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function InstallCapability(input: CapabilityInstallRequest): Promise<InstallResponse> {
  try {
    return (await axios.request({
    transformResponse: resp => InstallResponse.fromBinary(new Uint8Array(resp)),
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.target.cluster.id}/capabilities/${input.name}/install`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function UninstallCapability(input: CapabilityUninstallRequest): Promise<void> {
  try {
    return (await axios.request({
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.target.cluster.id}/capabilities/${input.name}/uninstall`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CapabilityStatus(input: CapabilityStatusRequest): Promise<NodeCapabilityStatus> {
  try {
    return (await axios.request({
    transformResponse: resp => NodeCapabilityStatus.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.cluster.id}/capabilities/${input.name}/status`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CapabilityUninstallStatus(input: CapabilityStatusRequest): Promise<TaskStatus> {
  try {
    return (await axios.request({
    transformResponse: resp => TaskStatus.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.cluster.id}/capabilities/${input.name}/uninstall/status`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function CancelCapabilityUninstall(input: CapabilityUninstallCancelRequest): Promise<void> {
  try {
    return (await axios.request({
      method: 'post',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/clusters/${input.cluster.id}/capabilities/${input.name}/uninstall/cancel`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function GetDashboardSettings(): Promise<DashboardSettings> {
  try {
    return (await axios.request({
    transformResponse: resp => DashboardSettings.fromBinary(new Uint8Array(resp)),
      method: 'get',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/dashboard/settings`
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}


export async function UpdateDashboardSettings(input: DashboardSettings): Promise<void> {
  try {
    return (await axios.request({
      method: 'put',
      responseType: 'arraybuffer',
      headers: {
        'Content-Type': 'application/octet-stream',
        'Accept': 'application/octet-stream',
      },
      url: `/opni-api/Management/dashboard/settings`,
    data: input?.toBinary() as ArrayBuffer
    })).data;
  } catch (ex) {
    if (ex?.response?.data) {
      const s = String.fromCharCode.apply(null, new Uint8Array(ex?.response?.data));
      console.error(s);
    }
    throw ex;
  }
}

