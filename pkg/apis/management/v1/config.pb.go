// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v1.0.0
// source: github.com/rancher/opni/pkg/apis/management/v1/config.proto

package v1

import (
	_ "github.com/rancher/opni/internal/codegen/cli"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GatewayConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpListenAddress    string            `protobuf:"bytes,1,opt,name=httpListenAddress,proto3" json:"httpListenAddress,omitempty"`
	GRPCListenAddress    string            `protobuf:"bytes,2,opt,name=gRPCListenAddress,proto3" json:"gRPCListenAddress,omitempty"`
	MetricsListenAddress string            `protobuf:"bytes,3,opt,name=metricsListenAddress,proto3" json:"metricsListenAddress,omitempty"`
	Hostname             string            `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Metrics              *MetricsSpec      `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Management           *ManagementSpec   `protobuf:"bytes,6,opt,name=management,proto3" json:"management,omitempty"`
	Storage              *StorageSpec      `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	Certs                *CertsSpec        `protobuf:"bytes,8,opt,name=certs,proto3" json:"certs,omitempty"`
	Plugins              *PluginsSpec      `protobuf:"bytes,9,opt,name=plugins,proto3" json:"plugins,omitempty"`
	Keyring              *KeyringSpec      `protobuf:"bytes,10,opt,name=keyring,proto3" json:"keyring,omitempty"`
	AgentUpgrade         *AgentUpgradeSpec `protobuf:"bytes,11,opt,name=agentUpgrade,proto3" json:"agentUpgrade,omitempty"`
	RateLimit            *RateLimitSpec    `protobuf:"bytes,12,opt,name=rateLimit,proto3" json:"rateLimit,omitempty"`
	Auth                 *AuthSpec         `protobuf:"bytes,13,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *GatewayConfigSpec) Reset() {
	*x = GatewayConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayConfigSpec) ProtoMessage() {}

func (x *GatewayConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayConfigSpec.ProtoReflect.Descriptor instead.
func (*GatewayConfigSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayConfigSpec) GetHttpListenAddress() string {
	if x != nil {
		return x.HttpListenAddress
	}
	return ""
}

func (x *GatewayConfigSpec) GetGRPCListenAddress() string {
	if x != nil {
		return x.GRPCListenAddress
	}
	return ""
}

func (x *GatewayConfigSpec) GetMetricsListenAddress() string {
	if x != nil {
		return x.MetricsListenAddress
	}
	return ""
}

func (x *GatewayConfigSpec) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GatewayConfigSpec) GetMetrics() *MetricsSpec {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GatewayConfigSpec) GetManagement() *ManagementSpec {
	if x != nil {
		return x.Management
	}
	return nil
}

func (x *GatewayConfigSpec) GetStorage() *StorageSpec {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *GatewayConfigSpec) GetCerts() *CertsSpec {
	if x != nil {
		return x.Certs
	}
	return nil
}

func (x *GatewayConfigSpec) GetPlugins() *PluginsSpec {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *GatewayConfigSpec) GetKeyring() *KeyringSpec {
	if x != nil {
		return x.Keyring
	}
	return nil
}

func (x *GatewayConfigSpec) GetAgentUpgrade() *AgentUpgradeSpec {
	if x != nil {
		return x.AgentUpgrade
	}
	return nil
}

func (x *GatewayConfigSpec) GetRateLimit() *RateLimitSpec {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *GatewayConfigSpec) GetAuth() *AuthSpec {
	if x != nil {
		return x.Auth
	}
	return nil
}

type MetricsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *MetricsSpec) Reset() {
	*x = MetricsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsSpec) ProtoMessage() {}

func (x *MetricsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsSpec.ProtoReflect.Descriptor instead.
func (*MetricsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *MetricsSpec) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ManagementSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrpcListenAddress    string     `protobuf:"bytes,1,opt,name=grpcListenAddress,proto3" json:"grpcListenAddress,omitempty"`
	HttpListenAddress    string     `protobuf:"bytes,2,opt,name=httpListenAddress,proto3" json:"httpListenAddress,omitempty"`
	WebhookListenAddress string     `protobuf:"bytes,3,opt,name=webhookListenAddress,proto3" json:"webhookListenAddress,omitempty"`
	RelayListenAddress   string     `protobuf:"bytes,4,opt,name=relayListenAddress,proto3" json:"relayListenAddress,omitempty"`
	WebCerts             *CertsSpec `protobuf:"bytes,5,opt,name=webCerts,proto3" json:"webCerts,omitempty"`
}

func (x *ManagementSpec) Reset() {
	*x = ManagementSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementSpec) ProtoMessage() {}

func (x *ManagementSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementSpec.ProtoReflect.Descriptor instead.
func (*ManagementSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *ManagementSpec) GetGrpcListenAddress() string {
	if x != nil {
		return x.GrpcListenAddress
	}
	return ""
}

func (x *ManagementSpec) GetHttpListenAddress() string {
	if x != nil {
		return x.HttpListenAddress
	}
	return ""
}

func (x *ManagementSpec) GetWebhookListenAddress() string {
	if x != nil {
		return x.WebhookListenAddress
	}
	return ""
}

func (x *ManagementSpec) GetRelayListenAddress() string {
	if x != nil {
		return x.RelayListenAddress
	}
	return ""
}

func (x *ManagementSpec) GetWebCerts() *CertsSpec {
	if x != nil {
		return x.WebCerts
	}
	return nil
}

type StorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO : might want enum here?
	Type           string                     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Etcd           *EtcdStorageSpec           `protobuf:"bytes,2,opt,name=etcd,proto3" json:"etcd,omitempty"`
	Jetstream      *JetstreamStorageSpec      `protobuf:"bytes,3,opt,name=jetstream,proto3" json:"jetstream,omitempty"`
	CustomResource *CustomResourceStorageSpec `protobuf:"bytes,4,opt,name=customResource,proto3" json:"customResource,omitempty"`
}

func (x *StorageSpec) Reset() {
	*x = StorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec) ProtoMessage() {}

func (x *StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *StorageSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StorageSpec) GetEtcd() *EtcdStorageSpec {
	if x != nil {
		return x.Etcd
	}
	return nil
}

func (x *StorageSpec) GetJetstream() *JetstreamStorageSpec {
	if x != nil {
		return x.Jetstream
	}
	return nil
}

func (x *StorageSpec) GetCustomResource() *CustomResourceStorageSpec {
	if x != nil {
		return x.CustomResource
	}
	return nil
}

type EtcdStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints []string  `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Certs     *MTLSSpec `protobuf:"bytes,2,opt,name=certs,proto3" json:"certs,omitempty"`
}

func (x *EtcdStorageSpec) Reset() {
	*x = EtcdStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EtcdStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EtcdStorageSpec) ProtoMessage() {}

func (x *EtcdStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EtcdStorageSpec.ProtoReflect.Descriptor instead.
func (*EtcdStorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *EtcdStorageSpec) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *EtcdStorageSpec) GetCerts() *MTLSSpec {
	if x != nil {
		return x.Certs
	}
	return nil
}

type JetstreamStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint     string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	NKeySeedPath string `protobuf:"bytes,2,opt,name=nKeySeedPath,proto3" json:"nKeySeedPath,omitempty"`
}

func (x *JetstreamStorageSpec) Reset() {
	*x = JetstreamStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JetstreamStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JetstreamStorageSpec) ProtoMessage() {}

func (x *JetstreamStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JetstreamStorageSpec.ProtoReflect.Descriptor instead.
func (*JetstreamStorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *JetstreamStorageSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *JetstreamStorageSpec) GetNKeySeedPath() string {
	if x != nil {
		return x.NKeySeedPath
	}
	return ""
}

type CustomResourceStorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CustomResourceStorageSpec) Reset() {
	*x = CustomResourceStorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomResourceStorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomResourceStorageSpec) ProtoMessage() {}

func (x *CustomResourceStorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomResourceStorageSpec.ProtoReflect.Descriptor instead.
func (*CustomResourceStorageSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *CustomResourceStorageSpec) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type MTLSSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the server CA certificate
	ServerCA string `protobuf:"bytes,1,opt,name=ServerCA,proto3" json:"ServerCA,omitempty"`
	// Path to the client CA certificate
	ClientCA string `protobuf:"bytes,2,opt,name=ClientCA,proto3" json:"ClientCA,omitempty"`
	// Path to the client certificate
	ClientCert string `protobuf:"bytes,3,opt,name=ClientCert,proto3" json:"ClientCert,omitempty"`
	// Path to the private key used for client cert auth
	ClientKey string `protobuf:"bytes,4,opt,name=ClientKey,proto3" json:"ClientKey,omitempty"`
}

func (x *MTLSSpec) Reset() {
	*x = MTLSSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTLSSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTLSSpec) ProtoMessage() {}

func (x *MTLSSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTLSSpec.ProtoReflect.Descriptor instead.
func (*MTLSSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *MTLSSpec) GetServerCA() string {
	if x != nil {
		return x.ServerCA
	}
	return ""
}

func (x *MTLSSpec) GetClientCA() string {
	if x != nil {
		return x.ClientCA
	}
	return ""
}

func (x *MTLSSpec) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *MTLSSpec) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

type CertsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to a PEM encoded CA certificate file. Mutually exclusive with CACertData
	CACert *string `protobuf:"bytes,1,opt,name=CACert,proto3,oneof" json:"CACert,omitempty"`
	// String containing PEM encoded CA certificate data. Mutually exclusive with CACert
	CACertData []byte `protobuf:"bytes,2,opt,name=CACertData,proto3" json:"CACertData,omitempty"`
	// Path to a PEM encoded server certificate file. Mutually exclusive with ServingCertData
	ServingCert *string `protobuf:"bytes,3,opt,name=ServingCert,proto3,oneof" json:"ServingCert,omitempty"`
	// String containing PEM encoded server certificate data. Mutually exclusive with ServingCert
	ServingCertData []byte `protobuf:"bytes,4,opt,name=ServingCertData,proto3" json:"ServingCertData,omitempty"`
	// Path to a PEM encoded server key file. Mutually exclusive with ServingKeyData
	ServingKey *string `protobuf:"bytes,5,opt,name=ServingKey,proto3,oneof" json:"ServingKey,omitempty"`
	// String containing PEM encoded server key data. Mutually exclusive with ServingKey
	ServingKeyData []byte `protobuf:"bytes,6,opt,name=ServingKeyData,proto3" json:"ServingKeyData,omitempty"`
}

func (x *CertsSpec) Reset() {
	*x = CertsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertsSpec) ProtoMessage() {}

func (x *CertsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertsSpec.ProtoReflect.Descriptor instead.
func (*CertsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *CertsSpec) GetCACert() string {
	if x != nil && x.CACert != nil {
		return *x.CACert
	}
	return ""
}

func (x *CertsSpec) GetCACertData() []byte {
	if x != nil {
		return x.CACertData
	}
	return nil
}

func (x *CertsSpec) GetServingCert() string {
	if x != nil && x.ServingCert != nil {
		return *x.ServingCert
	}
	return ""
}

func (x *CertsSpec) GetServingCertData() []byte {
	if x != nil {
		return x.ServingCertData
	}
	return nil
}

func (x *CertsSpec) GetServingKey() string {
	if x != nil && x.ServingKey != nil {
		return *x.ServingKey
	}
	return ""
}

func (x *CertsSpec) GetServingKeyData() []byte {
	if x != nil {
		return x.ServingKeyData
	}
	return nil
}

type PluginsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dir    string             `protobuf:"bytes,1,opt,name=dir,proto3" json:"dir,omitempty"`
	Binary *BinaryPluginsSpec `protobuf:"bytes,2,opt,name=binary,proto3" json:"binary,omitempty"`
}

func (x *PluginsSpec) Reset() {
	*x = PluginsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginsSpec) ProtoMessage() {}

func (x *PluginsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginsSpec.ProtoReflect.Descriptor instead.
func (*PluginsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *PluginsSpec) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *PluginsSpec) GetBinary() *BinaryPluginsSpec {
	if x != nil {
		return x.Binary
	}
	return nil
}

type BinaryPluginsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cache *CacheSpec `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
}

func (x *BinaryPluginsSpec) Reset() {
	*x = BinaryPluginsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryPluginsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryPluginsSpec) ProtoMessage() {}

func (x *BinaryPluginsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryPluginsSpec.ProtoReflect.Descriptor instead.
func (*BinaryPluginsSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *BinaryPluginsSpec) GetCache() *CacheSpec {
	if x != nil {
		return x.Cache
	}
	return nil
}

type CacheSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO : enum?
	PathEngine string `protobuf:"bytes,1,opt,name=PathEngine,proto3" json:"PathEngine,omitempty"`
}

func (x *CacheSpec) Reset() {
	*x = CacheSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSpec) ProtoMessage() {}

func (x *CacheSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSpec.ProtoReflect.Descriptor instead.
func (*CacheSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *CacheSpec) GetPathEngine() string {
	if x != nil {
		return x.PathEngine
	}
	return ""
}

type KeyringSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directories to search for files containing ephemeral keys.
	// All files in these directories will be loaded into the keyring on
	// startup. Keys loaded in this way will not be persisted across restarts.
	EphemeralKeyDirs []string `protobuf:"bytes,1,rep,name=EphemeralKeyDirs,proto3" json:"EphemeralKeyDirs,omitempty"`
}

func (x *KeyringSpec) Reset() {
	*x = KeyringSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyringSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyringSpec) ProtoMessage() {}

func (x *KeyringSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyringSpec.ProtoReflect.Descriptor instead.
func (*KeyringSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *KeyringSpec) GetEphemeralKeyDirs() []string {
	if x != nil {
		return x.EphemeralKeyDirs
	}
	return nil
}

type AgentUpgradeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kubernetes *KubernetesAgentUpgradeSpec `protobuf:"bytes,1,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
}

func (x *AgentUpgradeSpec) Reset() {
	*x = AgentUpgradeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentUpgradeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentUpgradeSpec) ProtoMessage() {}

func (x *AgentUpgradeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentUpgradeSpec.ProtoReflect.Descriptor instead.
func (*AgentUpgradeSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *AgentUpgradeSpec) GetKubernetes() *KubernetesAgentUpgradeSpec {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

type KubernetesAgentUpgradeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO : enum?
	ImageReolver string                       `protobuf:"bytes,1,opt,name=imageReolver,proto3" json:"imageReolver,omitempty"`
	Noop         *NoopImageResolverSpec       `protobuf:"bytes,2,opt,name=noop,proto3" json:"noop,omitempty"`
	Kuberntes    *KubernetesImageResolverSpec `protobuf:"bytes,3,opt,name=kuberntes,proto3" json:"kuberntes,omitempty"`
}

func (x *KubernetesAgentUpgradeSpec) Reset() {
	*x = KubernetesAgentUpgradeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesAgentUpgradeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAgentUpgradeSpec) ProtoMessage() {}

func (x *KubernetesAgentUpgradeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAgentUpgradeSpec.ProtoReflect.Descriptor instead.
func (*KubernetesAgentUpgradeSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *KubernetesAgentUpgradeSpec) GetImageReolver() string {
	if x != nil {
		return x.ImageReolver
	}
	return ""
}

func (x *KubernetesAgentUpgradeSpec) GetNoop() *NoopImageResolverSpec {
	if x != nil {
		return x.Noop
	}
	return nil
}

func (x *KubernetesAgentUpgradeSpec) GetKuberntes() *KubernetesImageResolverSpec {
	if x != nil {
		return x.Kuberntes
	}
	return nil
}

type NoopImageResolverSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoopImageResolverSpec) Reset() {
	*x = NoopImageResolverSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoopImageResolverSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoopImageResolverSpec) ProtoMessage() {}

func (x *NoopImageResolverSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoopImageResolverSpec.ProtoReflect.Descriptor instead.
func (*NoopImageResolverSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{15}
}

type KubernetesImageResolverSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlNamespace string `protobuf:"bytes,1,opt,name=controlNamespace,proto3" json:"controlNamespace,omitempty"`
}

func (x *KubernetesImageResolverSpec) Reset() {
	*x = KubernetesImageResolverSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesImageResolverSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesImageResolverSpec) ProtoMessage() {}

func (x *KubernetesImageResolverSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesImageResolverSpec.ProtoReflect.Descriptor instead.
func (*KubernetesImageResolverSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *KubernetesImageResolverSpec) GetControlNamespace() string {
	if x != nil {
		return x.ControlNamespace
	}
	return ""
}

type RateLimitSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate  float64 `protobuf:"fixed64,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Burst int32   `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
}

func (x *RateLimitSpec) Reset() {
	*x = RateLimitSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitSpec) ProtoMessage() {}

func (x *RateLimitSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitSpec.ProtoReflect.Descriptor instead.
func (*RateLimitSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{17}
}

func (x *RateLimitSpec) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *RateLimitSpec) GetBurst() int32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

type AuthSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// potentially fields to deprecate after auth is implemented
	AuthProvider   string   `protobuf:"bytes,1001,opt,name=authProvider,proto3" json:"authProvider,omitempty"`
	TrustedProxies []string `protobuf:"bytes,1002,rep,name=trustedProxies,proto3" json:"trustedProxies,omitempty"`
}

func (x *AuthSpec) Reset() {
	*x = AuthSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSpec) ProtoMessage() {}

func (x *AuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSpec.ProtoReflect.Descriptor instead.
func (*AuthSpec) Descriptor() ([]byte, []int) {
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP(), []int{18}
}

func (x *AuthSpec) GetAuthProvider() string {
	if x != nil {
		return x.AuthProvider
	}
	return ""
}

func (x *AuthSpec) GetTrustedProxies() []string {
	if x != nil {
		return x.TrustedProxies
	}
	return nil
}

var File_github_com_rancher_opni_pkg_apis_management_v1_config_proto protoreflect.FileDescriptor

var file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70,
	0x6e, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xec, 0x05, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x11, 0x68, 0x74, 0x74,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x8a, 0xc0, 0x0c, 0x10, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x38, 0x30, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a,
	0x11, 0x67, 0x52, 0x50, 0x43, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x8a, 0xc0, 0x0c, 0x10, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x30, 0x30, 0x39, 0x30, 0x52, 0x11,
	0x67, 0x52, 0x50, 0x43, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x48, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x8a, 0xc0, 0x0c, 0x10, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	0x3a, 0x38, 0x30, 0x38, 0x36, 0x52, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x8a,
	0xc0, 0x0c, 0x0b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a,
	0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x22, 0x31, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x8a, 0xc0, 0x0c, 0x0a, 0x0a, 0x08, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xc8, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x11, 0x67, 0x72, 0x70, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x8a, 0xc0, 0x0c, 0x15, 0x0a, 0x13, 0x74, 0x63, 0x70, 0x3a, 0x2f,
	0x2f, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x31, 0x31, 0x30, 0x39, 0x30, 0x52, 0x11,
	0x67, 0x72, 0x70, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x41, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x8a, 0xc0,
	0x0c, 0x0f, 0x0a, 0x0d, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x3a, 0x31, 0x31, 0x30, 0x38,
	0x30, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0x8a, 0xc0, 0x0c, 0x0f, 0x0a, 0x0d, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x2e,
	0x30, 0x3a, 0x31, 0x32, 0x30, 0x38, 0x30, 0x52, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a,
	0x08, 0x77, 0x65, 0x62, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x77, 0x65, 0x62, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x22, 0xed, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0x8a, 0xc0, 0x0c, 0x06, 0x0a, 0x04, 0x65, 0x74, 0x63, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x65, 0x74, 0x63, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x74, 0x63, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x65, 0x74, 0x63,
	0x64, 0x12, 0x3e, 0x0a, 0x09, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x5b, 0x0a, 0x0f, 0x45, 0x74, 0x63, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x54,
	0x4c, 0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x63, 0x65, 0x72, 0x74, 0x73, 0x22, 0x56, 0x0a,
	0x14, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x65,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0x39, 0x0a, 0x19, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x08, 0x4d, 0x54, 0x4c, 0x53, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x41, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x41, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x22, 0x90, 0x02, 0x0a, 0x09, 0x43, 0x65, 0x72, 0x74, 0x73, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1b, 0x0a, 0x06, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x56, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x40,
	0x0a, 0x11, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x22, 0x2b, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0x39, 0x0a,
	0x0b, 0x4b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x10,
	0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x45,
	0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x74, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x4e, 0x6f, 0x6f, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x22, 0x49,
	0x0a, 0x1b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x23, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0xea, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x32, 0xce,
	0x02, 0x0a, 0x10, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x45, 0x54, 0x12, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1d, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x1a, 0x0f, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f,
	0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x42,
	0x38, 0x82, 0xc0, 0x0c, 0x04, 0x08, 0x01, 0x10, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70,
	0x6e, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescOnce sync.Once
	file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescData = file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDesc
)

func file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescGZIP() []byte {
	file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescOnce.Do(func() {
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescData)
	})
	return file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDescData
}

var file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_goTypes = []interface{}{
	(*GatewayConfigSpec)(nil),           // 0: management.GatewayConfigSpec
	(*MetricsSpec)(nil),                 // 1: management.MetricsSpec
	(*ManagementSpec)(nil),              // 2: management.ManagementSpec
	(*StorageSpec)(nil),                 // 3: management.StorageSpec
	(*EtcdStorageSpec)(nil),             // 4: management.EtcdStorageSpec
	(*JetstreamStorageSpec)(nil),        // 5: management.JetstreamStorageSpec
	(*CustomResourceStorageSpec)(nil),   // 6: management.CustomResourceStorageSpec
	(*MTLSSpec)(nil),                    // 7: management.MTLSSpec
	(*CertsSpec)(nil),                   // 8: management.CertsSpec
	(*PluginsSpec)(nil),                 // 9: management.PluginsSpec
	(*BinaryPluginsSpec)(nil),           // 10: management.BinaryPluginsSpec
	(*CacheSpec)(nil),                   // 11: management.CacheSpec
	(*KeyringSpec)(nil),                 // 12: management.KeyringSpec
	(*AgentUpgradeSpec)(nil),            // 13: management.AgentUpgradeSpec
	(*KubernetesAgentUpgradeSpec)(nil),  // 14: management.KubernetesAgentUpgradeSpec
	(*NoopImageResolverSpec)(nil),       // 15: management.NoopImageResolverSpec
	(*KubernetesImageResolverSpec)(nil), // 16: management.KubernetesImageResolverSpec
	(*RateLimitSpec)(nil),               // 17: management.RateLimitSpec
	(*AuthSpec)(nil),                    // 18: management.AuthSpec
	(*emptypb.Empty)(nil),               // 19: google.protobuf.Empty
}
var file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_depIdxs = []int32{
	1,  // 0: management.GatewayConfigSpec.metrics:type_name -> management.MetricsSpec
	2,  // 1: management.GatewayConfigSpec.management:type_name -> management.ManagementSpec
	3,  // 2: management.GatewayConfigSpec.storage:type_name -> management.StorageSpec
	8,  // 3: management.GatewayConfigSpec.certs:type_name -> management.CertsSpec
	9,  // 4: management.GatewayConfigSpec.plugins:type_name -> management.PluginsSpec
	12, // 5: management.GatewayConfigSpec.keyring:type_name -> management.KeyringSpec
	13, // 6: management.GatewayConfigSpec.agentUpgrade:type_name -> management.AgentUpgradeSpec
	17, // 7: management.GatewayConfigSpec.rateLimit:type_name -> management.RateLimitSpec
	18, // 8: management.GatewayConfigSpec.auth:type_name -> management.AuthSpec
	8,  // 9: management.ManagementSpec.webCerts:type_name -> management.CertsSpec
	4,  // 10: management.StorageSpec.etcd:type_name -> management.EtcdStorageSpec
	5,  // 11: management.StorageSpec.jetstream:type_name -> management.JetstreamStorageSpec
	6,  // 12: management.StorageSpec.customResource:type_name -> management.CustomResourceStorageSpec
	7,  // 13: management.EtcdStorageSpec.certs:type_name -> management.MTLSSpec
	10, // 14: management.PluginsSpec.binary:type_name -> management.BinaryPluginsSpec
	11, // 15: management.BinaryPluginsSpec.cache:type_name -> management.CacheSpec
	14, // 16: management.AgentUpgradeSpec.kubernetes:type_name -> management.KubernetesAgentUpgradeSpec
	15, // 17: management.KubernetesAgentUpgradeSpec.noop:type_name -> management.NoopImageResolverSpec
	16, // 18: management.KubernetesAgentUpgradeSpec.kuberntes:type_name -> management.KubernetesImageResolverSpec
	19, // 19: management.GatewayConfigRET.GetGatewayConfig:input_type -> google.protobuf.Empty
	0,  // 20: management.GatewayConfigRET.PutGatewayConfig:input_type -> management.GatewayConfigSpec
	19, // 21: management.GatewayConfigRET.WatchGatewayConfig:input_type -> google.protobuf.Empty
	0,  // 22: management.GatewayConfigRET.GetGatewayConfig:output_type -> management.GatewayConfigSpec
	19, // 23: management.GatewayConfigRET.PutGatewayConfig:output_type -> google.protobuf.Empty
	0,  // 24: management.GatewayConfigRET.WatchGatewayConfig:output_type -> management.GatewayConfigSpec
	22, // [22:25] is the sub-list for method output_type
	19, // [19:22] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_init() }
func file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_init() {
	if File_github_com_rancher_opni_pkg_apis_management_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagementSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EtcdStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JetstreamStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomResourceStorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTLSSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryPluginsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyringSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentUpgradeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesAgentUpgradeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoopImageResolverSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesImageResolverSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_goTypes,
		DependencyIndexes: file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_depIdxs,
		MessageInfos:      file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_msgTypes,
	}.Build()
	File_github_com_rancher_opni_pkg_apis_management_v1_config_proto = out.File
	file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_rawDesc = nil
	file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_goTypes = nil
	file_github_com_rancher_opni_pkg_apis_management_v1_config_proto_depIdxs = nil
}
