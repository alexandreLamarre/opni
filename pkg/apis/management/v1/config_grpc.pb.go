// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/pkg/apis/management/v1/config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GatewayConfigRET_GetGatewayConfig_FullMethodName   = "/management.GatewayConfigRET/GetGatewayConfig"
	GatewayConfigRET_PutGatewayConfig_FullMethodName   = "/management.GatewayConfigRET/PutGatewayConfig"
	GatewayConfigRET_WatchGatewayConfig_FullMethodName = "/management.GatewayConfigRET/WatchGatewayConfig"
)

// GatewayConfigRETClient is the client API for GatewayConfigRET service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayConfigRETClient interface {
	GetGatewayConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayConfigSpec, error)
	PutGatewayConfig(ctx context.Context, in *GatewayConfigSpec, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WatchGatewayConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GatewayConfigRET_WatchGatewayConfigClient, error)
}

type gatewayConfigRETClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayConfigRETClient(cc grpc.ClientConnInterface) GatewayConfigRETClient {
	return &gatewayConfigRETClient{cc}
}

func (c *gatewayConfigRETClient) GetGatewayConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayConfigSpec, error) {
	out := new(GatewayConfigSpec)
	err := c.cc.Invoke(ctx, GatewayConfigRET_GetGatewayConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConfigRETClient) PutGatewayConfig(ctx context.Context, in *GatewayConfigSpec, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GatewayConfigRET_PutGatewayConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConfigRETClient) WatchGatewayConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GatewayConfigRET_WatchGatewayConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayConfigRET_ServiceDesc.Streams[0], GatewayConfigRET_WatchGatewayConfig_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayConfigRETWatchGatewayConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayConfigRET_WatchGatewayConfigClient interface {
	Recv() (*GatewayConfigSpec, error)
	grpc.ClientStream
}

type gatewayConfigRETWatchGatewayConfigClient struct {
	grpc.ClientStream
}

func (x *gatewayConfigRETWatchGatewayConfigClient) Recv() (*GatewayConfigSpec, error) {
	m := new(GatewayConfigSpec)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayConfigRETServer is the server API for GatewayConfigRET service.
// All implementations must embed UnimplementedGatewayConfigRETServer
// for forward compatibility
type GatewayConfigRETServer interface {
	GetGatewayConfig(context.Context, *emptypb.Empty) (*GatewayConfigSpec, error)
	PutGatewayConfig(context.Context, *GatewayConfigSpec) (*emptypb.Empty, error)
	WatchGatewayConfig(*emptypb.Empty, GatewayConfigRET_WatchGatewayConfigServer) error
	mustEmbedUnimplementedGatewayConfigRETServer()
}

// UnimplementedGatewayConfigRETServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayConfigRETServer struct {
}

func (UnimplementedGatewayConfigRETServer) GetGatewayConfig(context.Context, *emptypb.Empty) (*GatewayConfigSpec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayConfig not implemented")
}
func (UnimplementedGatewayConfigRETServer) PutGatewayConfig(context.Context, *GatewayConfigSpec) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGatewayConfig not implemented")
}
func (UnimplementedGatewayConfigRETServer) WatchGatewayConfig(*emptypb.Empty, GatewayConfigRET_WatchGatewayConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchGatewayConfig not implemented")
}
func (UnimplementedGatewayConfigRETServer) mustEmbedUnimplementedGatewayConfigRETServer() {}

// UnsafeGatewayConfigRETServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayConfigRETServer will
// result in compilation errors.
type UnsafeGatewayConfigRETServer interface {
	mustEmbedUnimplementedGatewayConfigRETServer()
}

func RegisterGatewayConfigRETServer(s grpc.ServiceRegistrar, srv GatewayConfigRETServer) {
	s.RegisterService(&GatewayConfigRET_ServiceDesc, srv)
}

func _GatewayConfigRET_GetGatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConfigRETServer).GetGatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConfigRET_GetGatewayConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConfigRETServer).GetGatewayConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConfigRET_PutGatewayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayConfigSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConfigRETServer).PutGatewayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConfigRET_PutGatewayConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConfigRETServer).PutGatewayConfig(ctx, req.(*GatewayConfigSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConfigRET_WatchGatewayConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayConfigRETServer).WatchGatewayConfig(m, &gatewayConfigRETWatchGatewayConfigServer{stream})
}

type GatewayConfigRET_WatchGatewayConfigServer interface {
	Send(*GatewayConfigSpec) error
	grpc.ServerStream
}

type gatewayConfigRETWatchGatewayConfigServer struct {
	grpc.ServerStream
}

func (x *gatewayConfigRETWatchGatewayConfigServer) Send(m *GatewayConfigSpec) error {
	return x.ServerStream.SendMsg(m)
}

// GatewayConfigRET_ServiceDesc is the grpc.ServiceDesc for GatewayConfigRET service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayConfigRET_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.GatewayConfigRET",
	HandlerType: (*GatewayConfigRETServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGatewayConfig",
			Handler:    _GatewayConfigRET_GetGatewayConfig_Handler,
		},
		{
			MethodName: "PutGatewayConfig",
			Handler:    _GatewayConfigRET_PutGatewayConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchGatewayConfig",
			Handler:       _GatewayConfigRET_WatchGatewayConfig_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/rancher/opni/pkg/apis/management/v1/config.proto",
}
