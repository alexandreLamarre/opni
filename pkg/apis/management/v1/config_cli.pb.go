// Code generated by cli_gen.go DO NOT EDIT.
// source: github.com/rancher/opni/pkg/apis/management/v1/config.proto

package v1

import (
	context "context"
	errors "errors"
	cli "github.com/rancher/opni/internal/codegen/cli"
	cliutil "github.com/rancher/opni/pkg/opni/cliutil"
	flagutil "github.com/rancher/opni/pkg/util/flagutil"
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strings "strings"
)

type contextKey_GatewayConfigRET_type struct{}

var contextKey_GatewayConfigRET contextKey_GatewayConfigRET_type

func ContextWithGatewayConfigRETClient(ctx context.Context, client GatewayConfigRETClient) context.Context {
	return context.WithValue(ctx, contextKey_GatewayConfigRET, client)
}

func GatewayConfigRETClientFromContext(ctx context.Context) (GatewayConfigRETClient, bool) {
	client, ok := ctx.Value(contextKey_GatewayConfigRET).(GatewayConfigRETClient)
	return client, ok
}

var extraCmds_GatewayConfigRET []*cobra.Command

func addExtraGatewayConfigRETCmd(custom *cobra.Command) {
	extraCmds_GatewayConfigRET = append(extraCmds_GatewayConfigRET, custom)
}

func BuildGatewayConfigRETCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:               "gateway-config-ret",
		Short:             ``,
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
	}

	cliutil.AddSubcommands(cmd, append([]*cobra.Command{
		BuildGatewayConfigRETGetGatewayConfigCmd(),
		BuildGatewayConfigRETPutGatewayConfigCmd(),
	}, extraCmds_GatewayConfigRET...)...)
	cli.AddOutputFlag(cmd)
	return cmd
}

func BuildGatewayConfigRETGetGatewayConfigCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "get-gateway-config",
		Short: "",
		Long: `
HTTP handlers for this method:
- GET /gateway/config
`[1:],
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
		RunE: func(cmd *cobra.Command, args []string) error {
			client, ok := GatewayConfigRETClientFromContext(cmd.Context())
			if !ok {
				cmd.PrintErrln("failed to get client from context")
				return nil
			}
			response, err := client.GetGatewayConfig(cmd.Context(), &emptypb.Empty{})
			if err != nil {
				return err
			}
			cli.RenderOutput(cmd, response)
			return nil
		},
	}
	return cmd
}

func BuildGatewayConfigRETPutGatewayConfigCmd() *cobra.Command {
	in := &GatewayConfigSpec{}
	cmd := &cobra.Command{
		Use:   "put-gateway-config",
		Short: "",
		Long: `
HTTP handlers for this method:
- PUT /gateway/config
`[1:],
		Args:              cobra.NoArgs,
		ValidArgsFunction: cobra.NoFileCompletions,
		RunE: func(cmd *cobra.Command, args []string) error {
			client, ok := GatewayConfigRETClientFromContext(cmd.Context())
			if !ok {
				cmd.PrintErrln("failed to get client from context")
				return nil
			}
			if in == nil {
				return errors.New("no input provided")
			}
			_, err := client.PutGatewayConfig(cmd.Context(), in)
			if err != nil {
				return err
			}
			return nil
		},
	}
	cmd.Flags().AddFlagSet(in.FlagSet())
	return cmd
}

func (in *GatewayConfigSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("GatewayConfigSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.HttpListenAddress, strings.Join(append(prefix, "http-listen-address"), "."), "localhost:8080", "")
	fs.StringVar(&in.GRPCListenAddress, strings.Join(append(prefix, "grpc-listen-address"), "."), "localhost:0090", "")
	fs.StringVar(&in.MetricsListenAddress, strings.Join(append(prefix, "metrics-listen-address"), "."), "localhost:8086", "")
	fs.StringVar(&in.Hostname, strings.Join(append(prefix, "hostname"), "."), "localhost", "")
	if in.Metrics == nil {
		in.Metrics = &MetricsSpec{}
	}
	fs.AddFlagSet(in.Metrics.FlagSet(append(prefix, "metrics")...))
	if in.Management == nil {
		in.Management = &ManagementSpec{}
	}
	fs.AddFlagSet(in.Management.FlagSet(append(prefix, "management")...))
	if in.Storage == nil {
		in.Storage = &StorageSpec{}
	}
	fs.AddFlagSet(in.Storage.FlagSet(append(prefix, "storage")...))
	if in.Certs == nil {
		in.Certs = &CertsSpec{}
	}
	fs.AddFlagSet(in.Certs.FlagSet(append(prefix, "certs")...))
	if in.Plugins == nil {
		in.Plugins = &PluginsSpec{}
	}
	fs.AddFlagSet(in.Plugins.FlagSet(append(prefix, "plugins")...))
	if in.Keyring == nil {
		in.Keyring = &KeyringSpec{}
	}
	fs.AddFlagSet(in.Keyring.FlagSet(append(prefix, "keyring")...))
	if in.AgentUpgrade == nil {
		in.AgentUpgrade = &AgentUpgradeSpec{}
	}
	fs.AddFlagSet(in.AgentUpgrade.FlagSet(append(prefix, "agent-upgrade")...))
	if in.RateLimit == nil {
		in.RateLimit = &RateLimitSpec{}
	}
	fs.AddFlagSet(in.RateLimit.FlagSet(append(prefix, "rate-limit")...))
	if in.Auth == nil {
		in.Auth = &AuthSpec{}
	}
	fs.AddFlagSet(in.Auth.FlagSet(append(prefix, "auth")...))
	return fs
}

func (in *MetricsSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("MetricsSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Path, strings.Join(append(prefix, "path"), "."), "/metrics", "")
	return fs
}

func (in *ManagementSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("ManagementSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.GrpcListenAddress, strings.Join(append(prefix, "grpc-listen-address"), "."), "tcp://0.0.0.0:11090", "")
	fs.StringVar(&in.HttpListenAddress, strings.Join(append(prefix, "http-listen-address"), "."), "0.0.0.0:11080", "")
	fs.StringVar(&in.WebhookListenAddress, strings.Join(append(prefix, "webhook-listen-address"), "."), "0.0.0.0:12080", "")
	fs.StringVar(&in.RelayListenAddress, strings.Join(append(prefix, "relay-listen-address"), "."), "", "")
	if in.WebCerts == nil {
		in.WebCerts = &CertsSpec{}
	}
	fs.AddFlagSet(in.WebCerts.FlagSet(append(prefix, "web-certs")...))
	return fs
}

func (in *CertsSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("CertsSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.Var(flagutil.StringPtrValue(nil, &in.CACert), strings.Join(append(prefix, "ca-cert"), "."), "Path to a PEM encoded CA certificate file. Mutually exclusive with CACertData")
	fs.BytesHexVar(&in.CACertData, strings.Join(append(prefix, "ca-cert-data"), "."), nil, "String containing PEM encoded CA certificate data. Mutually exclusive with CACert")
	fs.Var(flagutil.StringPtrValue(nil, &in.ServingCert), strings.Join(append(prefix, "serving-cert"), "."), "Path to a PEM encoded server certificate file. Mutually exclusive with ServingCertData")
	fs.BytesHexVar(&in.ServingCertData, strings.Join(append(prefix, "serving-cert-data"), "."), nil, "String containing PEM encoded server certificate data. Mutually exclusive with ServingCert")
	fs.Var(flagutil.StringPtrValue(nil, &in.ServingKey), strings.Join(append(prefix, "serving-key"), "."), "Path to a PEM encoded server key file. Mutually exclusive with ServingKeyData")
	fs.BytesHexVar(&in.ServingKeyData, strings.Join(append(prefix, "serving-key-data"), "."), nil, "String containing PEM encoded server key data. Mutually exclusive with ServingKey")
	return fs
}

func (in *StorageSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("StorageSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Type, strings.Join(append(prefix, "type"), "."), "etcd", "TODO : might want enum here?")
	if in.Etcd == nil {
		in.Etcd = &EtcdStorageSpec{}
	}
	fs.AddFlagSet(in.Etcd.FlagSet(append(prefix, "etcd")...))
	if in.Jetstream == nil {
		in.Jetstream = &JetstreamStorageSpec{}
	}
	fs.AddFlagSet(in.Jetstream.FlagSet(append(prefix, "jetstream")...))
	if in.CustomResource == nil {
		in.CustomResource = &CustomResourceStorageSpec{}
	}
	fs.AddFlagSet(in.CustomResource.FlagSet(append(prefix, "custom-resource")...))
	return fs
}

func (in *EtcdStorageSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("EtcdStorageSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringSliceVar(&in.Endpoints, strings.Join(append(prefix, "endpoints"), "."), nil, "")
	if in.Certs == nil {
		in.Certs = &MTLSSpec{}
	}
	fs.AddFlagSet(in.Certs.FlagSet(append(prefix, "certs")...))
	return fs
}

func (in *MTLSSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("MTLSSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.ServerCA, strings.Join(append(prefix, "server-ca"), "."), "", "Path to the server CA certificate")
	fs.StringVar(&in.ClientCA, strings.Join(append(prefix, "client-ca"), "."), "", "Path to the client CA certificate")
	fs.StringVar(&in.ClientCert, strings.Join(append(prefix, "client-cert"), "."), "", "Path to the client certificate")
	fs.StringVar(&in.ClientKey, strings.Join(append(prefix, "client-key"), "."), "", "Path to the private key used for client cert auth")
	return fs
}

func (in *JetstreamStorageSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("JetstreamStorageSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Endpoint, strings.Join(append(prefix, "endpoint"), "."), "", "")
	fs.StringVar(&in.NKeySeedPath, strings.Join(append(prefix, "n-key-seed-path"), "."), "", "")
	return fs
}

func (in *CustomResourceStorageSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("CustomResourceStorageSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Namespace, strings.Join(append(prefix, "namespace"), "."), "", "")
	return fs
}

func (in *PluginsSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("PluginsSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Dir, strings.Join(append(prefix, "dir"), "."), "", "")
	if in.Binary == nil {
		in.Binary = &BinaryPluginsSpec{}
	}
	fs.AddFlagSet(in.Binary.FlagSet(append(prefix, "binary")...))
	return fs
}

func (in *BinaryPluginsSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("BinaryPluginsSpec", pflag.ExitOnError)
	fs.SortFlags = true
	if in.Cache == nil {
		in.Cache = &CacheSpec{}
	}
	fs.AddFlagSet(in.Cache.FlagSet(append(prefix, "cache")...))
	return fs
}

func (in *CacheSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("CacheSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.PathEngine, strings.Join(append(prefix, "path-engine"), "."), "", "TODO : enum?")
	return fs
}

func (in *KeyringSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("KeyringSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringSliceVar(&in.EphemeralKeyDirs, strings.Join(append(prefix, "ephemeral-key-dirs"), "."), nil, "Directories to search for files containing ephemeral keys.")
	return fs
}

func (in *AgentUpgradeSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("AgentUpgradeSpec", pflag.ExitOnError)
	fs.SortFlags = true
	if in.Kubernetes == nil {
		in.Kubernetes = &KubernetesAgentUpgradeSpec{}
	}
	fs.AddFlagSet(in.Kubernetes.FlagSet(append(prefix, "kubernetes")...))
	return fs
}

func (in *KubernetesAgentUpgradeSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("KubernetesAgentUpgradeSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.ImageReolver, strings.Join(append(prefix, "image-reolver"), "."), "", "TODO : enum?")
	if in.Kuberntes == nil {
		in.Kuberntes = &KubernetesImageResolverSpec{}
	}
	fs.AddFlagSet(in.Kuberntes.FlagSet(append(prefix, "kuberntes")...))
	return fs
}

func (in *KubernetesImageResolverSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("KubernetesImageResolverSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.ControlNamespace, strings.Join(append(prefix, "control-namespace"), "."), "", "")
	return fs
}

func (in *RateLimitSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("RateLimitSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.Float64Var(&in.Rate, strings.Join(append(prefix, "rate"), "."), 0.0, "")
	fs.Int32Var(&in.Burst, strings.Join(append(prefix, "burst"), "."), 0, "")
	return fs
}

func (in *AuthSpec) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("AuthSpec", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.AuthProvider, strings.Join(append(prefix, "auth-provider"), "."), "", "potentially fields to deprecate after auth is implemented")
	fs.StringSliceVar(&in.TrustedProxies, strings.Join(append(prefix, "trusted-proxies"), "."), nil, "")
	return fs
}

func (in *GatewayConfigSpec) DeepCopyInto(out *GatewayConfigSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *GatewayConfigSpec) DeepCopy() *GatewayConfigSpec {
	return proto.Clone(in).(*GatewayConfigSpec)
}

func (in *MetricsSpec) DeepCopyInto(out *MetricsSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *MetricsSpec) DeepCopy() *MetricsSpec {
	return proto.Clone(in).(*MetricsSpec)
}

func (in *ManagementSpec) DeepCopyInto(out *ManagementSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *ManagementSpec) DeepCopy() *ManagementSpec {
	return proto.Clone(in).(*ManagementSpec)
}

func (in *StorageSpec) DeepCopyInto(out *StorageSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *StorageSpec) DeepCopy() *StorageSpec {
	return proto.Clone(in).(*StorageSpec)
}

func (in *EtcdStorageSpec) DeepCopyInto(out *EtcdStorageSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *EtcdStorageSpec) DeepCopy() *EtcdStorageSpec {
	return proto.Clone(in).(*EtcdStorageSpec)
}

func (in *JetstreamStorageSpec) DeepCopyInto(out *JetstreamStorageSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *JetstreamStorageSpec) DeepCopy() *JetstreamStorageSpec {
	return proto.Clone(in).(*JetstreamStorageSpec)
}

func (in *CustomResourceStorageSpec) DeepCopyInto(out *CustomResourceStorageSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *CustomResourceStorageSpec) DeepCopy() *CustomResourceStorageSpec {
	return proto.Clone(in).(*CustomResourceStorageSpec)
}

func (in *MTLSSpec) DeepCopyInto(out *MTLSSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *MTLSSpec) DeepCopy() *MTLSSpec {
	return proto.Clone(in).(*MTLSSpec)
}

func (in *CertsSpec) DeepCopyInto(out *CertsSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *CertsSpec) DeepCopy() *CertsSpec {
	return proto.Clone(in).(*CertsSpec)
}

func (in *PluginsSpec) DeepCopyInto(out *PluginsSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *PluginsSpec) DeepCopy() *PluginsSpec {
	return proto.Clone(in).(*PluginsSpec)
}

func (in *BinaryPluginsSpec) DeepCopyInto(out *BinaryPluginsSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *BinaryPluginsSpec) DeepCopy() *BinaryPluginsSpec {
	return proto.Clone(in).(*BinaryPluginsSpec)
}

func (in *CacheSpec) DeepCopyInto(out *CacheSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *CacheSpec) DeepCopy() *CacheSpec {
	return proto.Clone(in).(*CacheSpec)
}

func (in *KeyringSpec) DeepCopyInto(out *KeyringSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *KeyringSpec) DeepCopy() *KeyringSpec {
	return proto.Clone(in).(*KeyringSpec)
}

func (in *AgentUpgradeSpec) DeepCopyInto(out *AgentUpgradeSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *AgentUpgradeSpec) DeepCopy() *AgentUpgradeSpec {
	return proto.Clone(in).(*AgentUpgradeSpec)
}

func (in *KubernetesAgentUpgradeSpec) DeepCopyInto(out *KubernetesAgentUpgradeSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *KubernetesAgentUpgradeSpec) DeepCopy() *KubernetesAgentUpgradeSpec {
	return proto.Clone(in).(*KubernetesAgentUpgradeSpec)
}

func (in *NoopImageResolverSpec) DeepCopyInto(out *NoopImageResolverSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *NoopImageResolverSpec) DeepCopy() *NoopImageResolverSpec {
	return proto.Clone(in).(*NoopImageResolverSpec)
}

func (in *KubernetesImageResolverSpec) DeepCopyInto(out *KubernetesImageResolverSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *KubernetesImageResolverSpec) DeepCopy() *KubernetesImageResolverSpec {
	return proto.Clone(in).(*KubernetesImageResolverSpec)
}

func (in *RateLimitSpec) DeepCopyInto(out *RateLimitSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *RateLimitSpec) DeepCopy() *RateLimitSpec {
	return proto.Clone(in).(*RateLimitSpec)
}

func (in *AuthSpec) DeepCopyInto(out *AuthSpec) {
	out.Reset()
	proto.Merge(out, in)
}

func (in *AuthSpec) DeepCopy() *AuthSpec {
	return proto.Clone(in).(*AuthSpec)
}
