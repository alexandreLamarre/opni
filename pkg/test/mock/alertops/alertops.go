// Code generated by MockGen. DO NOT EDIT.
// Source: plugins/alerting/apis/alertops/alertops_grpc.pb.go

// Package mock_alertops is a generated GoMock package.
package mock_alertops

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	alertops "github.com/rancher/opni/plugins/alerting/apis/alertops"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAlertingAdminClient is a mock of AlertingAdminClient interface.
type MockAlertingAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockAlertingAdminClientMockRecorder
}

// MockAlertingAdminClientMockRecorder is the mock recorder for MockAlertingAdminClient.
type MockAlertingAdminClientMockRecorder struct {
	mock *MockAlertingAdminClient
}

// NewMockAlertingAdminClient creates a new mock instance.
func NewMockAlertingAdminClient(ctrl *gomock.Controller) *MockAlertingAdminClient {
	mock := &MockAlertingAdminClient{ctrl: ctrl}
	mock.recorder = &MockAlertingAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertingAdminClient) EXPECT() *MockAlertingAdminClientMockRecorder {
	return m.recorder
}

// ConfigureCluster mocks base method.
func (m *MockAlertingAdminClient) ConfigureCluster(ctx context.Context, in *alertops.ClusterConfiguration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureCluster", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureCluster indicates an expected call of ConfigureCluster.
func (mr *MockAlertingAdminClientMockRecorder) ConfigureCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureCluster", reflect.TypeOf((*MockAlertingAdminClient)(nil).ConfigureCluster), varargs...)
}

// GetClusterConfiguration mocks base method.
func (m *MockAlertingAdminClient) GetClusterConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*alertops.ClusterConfiguration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterConfiguration", varargs...)
	ret0, _ := ret[0].(*alertops.ClusterConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConfiguration indicates an expected call of GetClusterConfiguration.
func (mr *MockAlertingAdminClientMockRecorder) GetClusterConfiguration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConfiguration", reflect.TypeOf((*MockAlertingAdminClient)(nil).GetClusterConfiguration), varargs...)
}

// GetClusterStatus mocks base method.
func (m *MockAlertingAdminClient) GetClusterStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*alertops.InstallStatus, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterStatus", varargs...)
	ret0, _ := ret[0].(*alertops.InstallStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStatus indicates an expected call of GetClusterStatus.
func (mr *MockAlertingAdminClientMockRecorder) GetClusterStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStatus", reflect.TypeOf((*MockAlertingAdminClient)(nil).GetClusterStatus), varargs...)
}

// Info mocks base method.
func (m *MockAlertingAdminClient) Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*alertops.ComponentInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*alertops.ComponentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockAlertingAdminClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAlertingAdminClient)(nil).Info), varargs...)
}

// InstallCluster mocks base method.
func (m *MockAlertingAdminClient) InstallCluster(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallCluster", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallCluster indicates an expected call of InstallCluster.
func (mr *MockAlertingAdminClientMockRecorder) InstallCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallCluster", reflect.TypeOf((*MockAlertingAdminClient)(nil).InstallCluster), varargs...)
}

// UninstallCluster mocks base method.
func (m *MockAlertingAdminClient) UninstallCluster(ctx context.Context, in *alertops.UninstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UninstallCluster", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallCluster indicates an expected call of UninstallCluster.
func (mr *MockAlertingAdminClientMockRecorder) UninstallCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallCluster", reflect.TypeOf((*MockAlertingAdminClient)(nil).UninstallCluster), varargs...)
}

// MockAlertingAdminServer is a mock of AlertingAdminServer interface.
type MockAlertingAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockAlertingAdminServerMockRecorder
}

// MockAlertingAdminServerMockRecorder is the mock recorder for MockAlertingAdminServer.
type MockAlertingAdminServerMockRecorder struct {
	mock *MockAlertingAdminServer
}

// NewMockAlertingAdminServer creates a new mock instance.
func NewMockAlertingAdminServer(ctrl *gomock.Controller) *MockAlertingAdminServer {
	mock := &MockAlertingAdminServer{ctrl: ctrl}
	mock.recorder = &MockAlertingAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertingAdminServer) EXPECT() *MockAlertingAdminServerMockRecorder {
	return m.recorder
}

// ConfigureCluster mocks base method.
func (m *MockAlertingAdminServer) ConfigureCluster(arg0 context.Context, arg1 *alertops.ClusterConfiguration) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureCluster", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureCluster indicates an expected call of ConfigureCluster.
func (mr *MockAlertingAdminServerMockRecorder) ConfigureCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureCluster", reflect.TypeOf((*MockAlertingAdminServer)(nil).ConfigureCluster), arg0, arg1)
}

// GetClusterConfiguration mocks base method.
func (m *MockAlertingAdminServer) GetClusterConfiguration(arg0 context.Context, arg1 *emptypb.Empty) (*alertops.ClusterConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterConfiguration", arg0, arg1)
	ret0, _ := ret[0].(*alertops.ClusterConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConfiguration indicates an expected call of GetClusterConfiguration.
func (mr *MockAlertingAdminServerMockRecorder) GetClusterConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConfiguration", reflect.TypeOf((*MockAlertingAdminServer)(nil).GetClusterConfiguration), arg0, arg1)
}

// GetClusterStatus mocks base method.
func (m *MockAlertingAdminServer) GetClusterStatus(arg0 context.Context, arg1 *emptypb.Empty) (*alertops.InstallStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterStatus", arg0, arg1)
	ret0, _ := ret[0].(*alertops.InstallStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterStatus indicates an expected call of GetClusterStatus.
func (mr *MockAlertingAdminServerMockRecorder) GetClusterStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterStatus", reflect.TypeOf((*MockAlertingAdminServer)(nil).GetClusterStatus), arg0, arg1)
}

// Info mocks base method.
func (m *MockAlertingAdminServer) Info(arg0 context.Context, arg1 *emptypb.Empty) (*alertops.ComponentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*alertops.ComponentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockAlertingAdminServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAlertingAdminServer)(nil).Info), arg0, arg1)
}

// InstallCluster mocks base method.
func (m *MockAlertingAdminServer) InstallCluster(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallCluster", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallCluster indicates an expected call of InstallCluster.
func (mr *MockAlertingAdminServerMockRecorder) InstallCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallCluster", reflect.TypeOf((*MockAlertingAdminServer)(nil).InstallCluster), arg0, arg1)
}

// UninstallCluster mocks base method.
func (m *MockAlertingAdminServer) UninstallCluster(arg0 context.Context, arg1 *alertops.UninstallRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallCluster", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallCluster indicates an expected call of UninstallCluster.
func (mr *MockAlertingAdminServerMockRecorder) UninstallCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallCluster", reflect.TypeOf((*MockAlertingAdminServer)(nil).UninstallCluster), arg0, arg1)
}

// mustEmbedUnimplementedAlertingAdminServer mocks base method.
func (m *MockAlertingAdminServer) mustEmbedUnimplementedAlertingAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAlertingAdminServer")
}

// mustEmbedUnimplementedAlertingAdminServer indicates an expected call of mustEmbedUnimplementedAlertingAdminServer.
func (mr *MockAlertingAdminServerMockRecorder) mustEmbedUnimplementedAlertingAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAlertingAdminServer", reflect.TypeOf((*MockAlertingAdminServer)(nil).mustEmbedUnimplementedAlertingAdminServer))
}

// MockUnsafeAlertingAdminServer is a mock of UnsafeAlertingAdminServer interface.
type MockUnsafeAlertingAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAlertingAdminServerMockRecorder
}

// MockUnsafeAlertingAdminServerMockRecorder is the mock recorder for MockUnsafeAlertingAdminServer.
type MockUnsafeAlertingAdminServerMockRecorder struct {
	mock *MockUnsafeAlertingAdminServer
}

// NewMockUnsafeAlertingAdminServer creates a new mock instance.
func NewMockUnsafeAlertingAdminServer(ctrl *gomock.Controller) *MockUnsafeAlertingAdminServer {
	mock := &MockUnsafeAlertingAdminServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAlertingAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAlertingAdminServer) EXPECT() *MockUnsafeAlertingAdminServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAlertingAdminServer mocks base method.
func (m *MockUnsafeAlertingAdminServer) mustEmbedUnimplementedAlertingAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAlertingAdminServer")
}

// mustEmbedUnimplementedAlertingAdminServer indicates an expected call of mustEmbedUnimplementedAlertingAdminServer.
func (mr *MockUnsafeAlertingAdminServerMockRecorder) mustEmbedUnimplementedAlertingAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAlertingAdminServer", reflect.TypeOf((*MockUnsafeAlertingAdminServer)(nil).mustEmbedUnimplementedAlertingAdminServer))
}

// MockAdminInfoClient is a mock of AdminInfoClient interface.
type MockAdminInfoClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminInfoClientMockRecorder
}

// MockAdminInfoClientMockRecorder is the mock recorder for MockAdminInfoClient.
type MockAdminInfoClientMockRecorder struct {
	mock *MockAdminInfoClient
}

// NewMockAdminInfoClient creates a new mock instance.
func NewMockAdminInfoClient(ctrl *gomock.Controller) *MockAdminInfoClient {
	mock := &MockAdminInfoClient{ctrl: ctrl}
	mock.recorder = &MockAdminInfoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminInfoClient) EXPECT() *MockAdminInfoClientMockRecorder {
	return m.recorder
}

// SyncInfo mocks base method.
func (m *MockAdminInfoClient) SyncInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncInfo", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncInfo indicates an expected call of SyncInfo.
func (mr *MockAdminInfoClientMockRecorder) SyncInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncInfo", reflect.TypeOf((*MockAdminInfoClient)(nil).SyncInfo), varargs...)
}

// MockAdminInfoServer is a mock of AdminInfoServer interface.
type MockAdminInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockAdminInfoServerMockRecorder
}

// MockAdminInfoServerMockRecorder is the mock recorder for MockAdminInfoServer.
type MockAdminInfoServerMockRecorder struct {
	mock *MockAdminInfoServer
}

// NewMockAdminInfoServer creates a new mock instance.
func NewMockAdminInfoServer(ctrl *gomock.Controller) *MockAdminInfoServer {
	mock := &MockAdminInfoServer{ctrl: ctrl}
	mock.recorder = &MockAdminInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminInfoServer) EXPECT() *MockAdminInfoServerMockRecorder {
	return m.recorder
}

// SyncInfo mocks base method.
func (m *MockAdminInfoServer) SyncInfo(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncInfo", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncInfo indicates an expected call of SyncInfo.
func (mr *MockAdminInfoServerMockRecorder) SyncInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncInfo", reflect.TypeOf((*MockAdminInfoServer)(nil).SyncInfo), arg0, arg1)
}

// mustEmbedUnimplementedAdminInfoServer mocks base method.
func (m *MockAdminInfoServer) mustEmbedUnimplementedAdminInfoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminInfoServer")
}

// mustEmbedUnimplementedAdminInfoServer indicates an expected call of mustEmbedUnimplementedAdminInfoServer.
func (mr *MockAdminInfoServerMockRecorder) mustEmbedUnimplementedAdminInfoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminInfoServer", reflect.TypeOf((*MockAdminInfoServer)(nil).mustEmbedUnimplementedAdminInfoServer))
}

// MockUnsafeAdminInfoServer is a mock of UnsafeAdminInfoServer interface.
type MockUnsafeAdminInfoServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAdminInfoServerMockRecorder
}

// MockUnsafeAdminInfoServerMockRecorder is the mock recorder for MockUnsafeAdminInfoServer.
type MockUnsafeAdminInfoServerMockRecorder struct {
	mock *MockUnsafeAdminInfoServer
}

// NewMockUnsafeAdminInfoServer creates a new mock instance.
func NewMockUnsafeAdminInfoServer(ctrl *gomock.Controller) *MockUnsafeAdminInfoServer {
	mock := &MockUnsafeAdminInfoServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAdminInfoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAdminInfoServer) EXPECT() *MockUnsafeAdminInfoServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAdminInfoServer mocks base method.
func (m *MockUnsafeAdminInfoServer) mustEmbedUnimplementedAdminInfoServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminInfoServer")
}

// mustEmbedUnimplementedAdminInfoServer indicates an expected call of mustEmbedUnimplementedAdminInfoServer.
func (mr *MockUnsafeAdminInfoServerMockRecorder) mustEmbedUnimplementedAdminInfoServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminInfoServer", reflect.TypeOf((*MockUnsafeAdminInfoServer)(nil).mustEmbedUnimplementedAdminInfoServer))
}

// MockConfigReconcilerClient is a mock of ConfigReconcilerClient interface.
type MockConfigReconcilerClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReconcilerClientMockRecorder
}

// MockConfigReconcilerClientMockRecorder is the mock recorder for MockConfigReconcilerClient.
type MockConfigReconcilerClientMockRecorder struct {
	mock *MockConfigReconcilerClient
}

// NewMockConfigReconcilerClient creates a new mock instance.
func NewMockConfigReconcilerClient(ctrl *gomock.Controller) *MockConfigReconcilerClient {
	mock := &MockConfigReconcilerClient{ctrl: ctrl}
	mock.recorder = &MockConfigReconcilerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReconcilerClient) EXPECT() *MockConfigReconcilerClientMockRecorder {
	return m.recorder
}

// SyncConfig mocks base method.
func (m *MockConfigReconcilerClient) SyncConfig(ctx context.Context, opts ...grpc.CallOption) (alertops.ConfigReconciler_SyncConfigClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncConfig", varargs...)
	ret0, _ := ret[0].(alertops.ConfigReconciler_SyncConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncConfig indicates an expected call of SyncConfig.
func (mr *MockConfigReconcilerClientMockRecorder) SyncConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncConfig", reflect.TypeOf((*MockConfigReconcilerClient)(nil).SyncConfig), varargs...)
}

// MockConfigReconciler_SyncConfigClient is a mock of ConfigReconciler_SyncConfigClient interface.
type MockConfigReconciler_SyncConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReconciler_SyncConfigClientMockRecorder
}

// MockConfigReconciler_SyncConfigClientMockRecorder is the mock recorder for MockConfigReconciler_SyncConfigClient.
type MockConfigReconciler_SyncConfigClientMockRecorder struct {
	mock *MockConfigReconciler_SyncConfigClient
}

// NewMockConfigReconciler_SyncConfigClient creates a new mock instance.
func NewMockConfigReconciler_SyncConfigClient(ctrl *gomock.Controller) *MockConfigReconciler_SyncConfigClient {
	mock := &MockConfigReconciler_SyncConfigClient{ctrl: ctrl}
	mock.recorder = &MockConfigReconciler_SyncConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReconciler_SyncConfigClient) EXPECT() *MockConfigReconciler_SyncConfigClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockConfigReconciler_SyncConfigClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockConfigReconciler_SyncConfigClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).Context))
}

// Header mocks base method.
func (m *MockConfigReconciler_SyncConfigClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockConfigReconciler_SyncConfigClient) Recv() (*alertops.SyncRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*alertops.SyncRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigReconciler_SyncConfigClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockConfigReconciler_SyncConfigClient) Send(arg0 *alertops.ConnectInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockConfigReconciler_SyncConfigClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockConfigReconciler_SyncConfigClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockConfigReconciler_SyncConfigClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockConfigReconciler_SyncConfigClient)(nil).Trailer))
}

// MockConfigReconcilerServer is a mock of ConfigReconcilerServer interface.
type MockConfigReconcilerServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReconcilerServerMockRecorder
}

// MockConfigReconcilerServerMockRecorder is the mock recorder for MockConfigReconcilerServer.
type MockConfigReconcilerServerMockRecorder struct {
	mock *MockConfigReconcilerServer
}

// NewMockConfigReconcilerServer creates a new mock instance.
func NewMockConfigReconcilerServer(ctrl *gomock.Controller) *MockConfigReconcilerServer {
	mock := &MockConfigReconcilerServer{ctrl: ctrl}
	mock.recorder = &MockConfigReconcilerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReconcilerServer) EXPECT() *MockConfigReconcilerServerMockRecorder {
	return m.recorder
}

// SyncConfig mocks base method.
func (m *MockConfigReconcilerServer) SyncConfig(arg0 alertops.ConfigReconciler_SyncConfigServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncConfig indicates an expected call of SyncConfig.
func (mr *MockConfigReconcilerServerMockRecorder) SyncConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncConfig", reflect.TypeOf((*MockConfigReconcilerServer)(nil).SyncConfig), arg0)
}

// mustEmbedUnimplementedConfigReconcilerServer mocks base method.
func (m *MockConfigReconcilerServer) mustEmbedUnimplementedConfigReconcilerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigReconcilerServer")
}

// mustEmbedUnimplementedConfigReconcilerServer indicates an expected call of mustEmbedUnimplementedConfigReconcilerServer.
func (mr *MockConfigReconcilerServerMockRecorder) mustEmbedUnimplementedConfigReconcilerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigReconcilerServer", reflect.TypeOf((*MockConfigReconcilerServer)(nil).mustEmbedUnimplementedConfigReconcilerServer))
}

// MockUnsafeConfigReconcilerServer is a mock of UnsafeConfigReconcilerServer interface.
type MockUnsafeConfigReconcilerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeConfigReconcilerServerMockRecorder
}

// MockUnsafeConfigReconcilerServerMockRecorder is the mock recorder for MockUnsafeConfigReconcilerServer.
type MockUnsafeConfigReconcilerServerMockRecorder struct {
	mock *MockUnsafeConfigReconcilerServer
}

// NewMockUnsafeConfigReconcilerServer creates a new mock instance.
func NewMockUnsafeConfigReconcilerServer(ctrl *gomock.Controller) *MockUnsafeConfigReconcilerServer {
	mock := &MockUnsafeConfigReconcilerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeConfigReconcilerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeConfigReconcilerServer) EXPECT() *MockUnsafeConfigReconcilerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedConfigReconcilerServer mocks base method.
func (m *MockUnsafeConfigReconcilerServer) mustEmbedUnimplementedConfigReconcilerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigReconcilerServer")
}

// mustEmbedUnimplementedConfigReconcilerServer indicates an expected call of mustEmbedUnimplementedConfigReconcilerServer.
func (mr *MockUnsafeConfigReconcilerServerMockRecorder) mustEmbedUnimplementedConfigReconcilerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigReconcilerServer", reflect.TypeOf((*MockUnsafeConfigReconcilerServer)(nil).mustEmbedUnimplementedConfigReconcilerServer))
}

// MockConfigReconciler_SyncConfigServer is a mock of ConfigReconciler_SyncConfigServer interface.
type MockConfigReconciler_SyncConfigServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReconciler_SyncConfigServerMockRecorder
}

// MockConfigReconciler_SyncConfigServerMockRecorder is the mock recorder for MockConfigReconciler_SyncConfigServer.
type MockConfigReconciler_SyncConfigServerMockRecorder struct {
	mock *MockConfigReconciler_SyncConfigServer
}

// NewMockConfigReconciler_SyncConfigServer creates a new mock instance.
func NewMockConfigReconciler_SyncConfigServer(ctrl *gomock.Controller) *MockConfigReconciler_SyncConfigServer {
	mock := &MockConfigReconciler_SyncConfigServer{ctrl: ctrl}
	mock.recorder = &MockConfigReconciler_SyncConfigServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReconciler_SyncConfigServer) EXPECT() *MockConfigReconciler_SyncConfigServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockConfigReconciler_SyncConfigServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockConfigReconciler_SyncConfigServer) Recv() (*alertops.ConnectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*alertops.ConnectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockConfigReconciler_SyncConfigServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockConfigReconciler_SyncConfigServer) Send(arg0 *alertops.SyncRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockConfigReconciler_SyncConfigServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockConfigReconciler_SyncConfigServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockConfigReconciler_SyncConfigServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockConfigReconciler_SyncConfigServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockConfigReconciler_SyncConfigServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockConfigReconciler_SyncConfigServer)(nil).SetTrailer), arg0)
}
