// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/util/streams/streams.go

// Package mock_streams is a generated GoMock package.
package mock_streams

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStream) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStream)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockStream) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStream)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockStream) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStream)(nil).SendMsg), m)
}

// MockContextSetter is a mock of ContextSetter interface.
type MockContextSetter struct {
	ctrl     *gomock.Controller
	recorder *MockContextSetterMockRecorder
}

// MockContextSetterMockRecorder is the mock recorder for MockContextSetter.
type MockContextSetterMockRecorder struct {
	mock *MockContextSetter
}

// NewMockContextSetter creates a new mock instance.
func NewMockContextSetter(ctrl *gomock.Controller) *MockContextSetter {
	mock := &MockContextSetter{ctrl: ctrl}
	mock.recorder = &MockContextSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextSetter) EXPECT() *MockContextSetterMockRecorder {
	return m.recorder
}

// SetContext mocks base method.
func (m *MockContextSetter) SetContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockContextSetterMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockContextSetter)(nil).SetContext), ctx)
}

// MockStreamWrapper is a mock of StreamWrapper interface.
type MockStreamWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockStreamWrapperMockRecorder
}

// MockStreamWrapperMockRecorder is the mock recorder for MockStreamWrapper.
type MockStreamWrapperMockRecorder struct {
	mock *MockStreamWrapper
}

// NewMockStreamWrapper creates a new mock instance.
func NewMockStreamWrapper(ctrl *gomock.Controller) *MockStreamWrapper {
	mock := &MockStreamWrapper{ctrl: ctrl}
	mock.recorder = &MockStreamWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamWrapper) EXPECT() *MockStreamWrapperMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreamWrapper) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreamWrapperMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreamWrapper)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockStreamWrapper) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreamWrapperMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreamWrapper)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockStreamWrapper) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreamWrapperMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreamWrapper)(nil).SendMsg), m)
}

// SetContext mocks base method.
func (m *MockStreamWrapper) SetContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockStreamWrapperMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockStreamWrapper)(nil).SetContext), ctx)
}
