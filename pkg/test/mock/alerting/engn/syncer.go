// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/alerting/engn/syncer.go

// Package mock_engn is a generated GoMock package.
package mock_engn

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/rancher/opni/pkg/alerting/drivers/config"
	engn "github.com/rancher/opni/pkg/alerting/engn"
	sync "github.com/rancher/opni/pkg/alerting/server/sync"
	alertops "github.com/rancher/opni/plugins/alerting/apis/alertops"
)

// MockSyncConstructor is a mock of SyncConstructor interface.
type MockSyncConstructor struct {
	ctrl     *gomock.Controller
	recorder *MockSyncConstructorMockRecorder
}

// MockSyncConstructorMockRecorder is the mock recorder for MockSyncConstructor.
type MockSyncConstructorMockRecorder struct {
	mock *MockSyncConstructor
}

// NewMockSyncConstructor creates a new mock instance.
func NewMockSyncConstructor(ctrl *gomock.Controller) *MockSyncConstructor {
	mock := &MockSyncConstructor{ctrl: ctrl}
	mock.recorder = &MockSyncConstructorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncConstructor) EXPECT() *MockSyncConstructorMockRecorder {
	return m.recorder
}

// Construct mocks base method.
func (m *MockSyncConstructor) Construct() (engn.SyncPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Construct")
	ret0, _ := ret[0].(engn.SyncPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Construct indicates an expected call of Construct.
func (mr *MockSyncConstructorMockRecorder) Construct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Construct", reflect.TypeOf((*MockSyncConstructor)(nil).Construct))
}

// GetHash mocks base method.
func (m *MockSyncConstructor) GetHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockSyncConstructorMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockSyncConstructor)(nil).GetHash))
}

// Sync mocks base method.
func (m *MockSyncConstructor) Sync(ctx context.Context, cfg *config.WebhookConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, cfg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncConstructorMockRecorder) Sync(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncConstructor)(nil).Sync), ctx, cfg)
}

// MockSyncEngine is a mock of SyncEngine interface.
type MockSyncEngine struct {
	ctrl     *gomock.Controller
	recorder *MockSyncEngineMockRecorder
}

// MockSyncEngineMockRecorder is the mock recorder for MockSyncEngine.
type MockSyncEngineMockRecorder struct {
	mock *MockSyncEngine
}

// NewMockSyncEngine creates a new mock instance.
func NewMockSyncEngine(ctrl *gomock.Controller) *MockSyncEngine {
	mock := &MockSyncEngine{ctrl: ctrl}
	mock.recorder = &MockSyncEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncEngine) EXPECT() *MockSyncEngineMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockSyncEngine) Sync(ctx context.Context, info sync.SyncInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncEngineMockRecorder) Sync(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncEngine)(nil).Sync), ctx, info)
}

// MockSyncManager is a mock of SyncManager interface.
type MockSyncManager struct {
	ctrl     *gomock.Controller
	recorder *MockSyncManagerMockRecorder
}

// MockSyncManagerMockRecorder is the mock recorder for MockSyncManager.
type MockSyncManagerMockRecorder struct {
	mock *MockSyncManager
}

// NewMockSyncManager creates a new mock instance.
func NewMockSyncManager(ctrl *gomock.Controller) *MockSyncManager {
	mock := &MockSyncManager{ctrl: ctrl}
	mock.recorder = &MockSyncManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncManager) EXPECT() *MockSyncManagerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockSyncManager) Info() map[string]engn.RemoteInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(map[string]engn.RemoteInfo)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockSyncManagerMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSyncManager)(nil).Info))
}

// Push mocks base method.
func (m *MockSyncManager) Push(payload engn.SyncPayload) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", payload)
}

// Push indicates an expected call of Push.
func (mr *MockSyncManagerMockRecorder) Push(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockSyncManager)(nil).Push), payload)
}

// PushTarget mocks base method.
func (m *MockSyncManager) PushTarget(id string, payload engn.SyncPayload) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushTarget", id, payload)
}

// PushTarget indicates an expected call of PushTarget.
func (mr *MockSyncManagerMockRecorder) PushTarget(id, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushTarget", reflect.TypeOf((*MockSyncManager)(nil).PushTarget), id, payload)
}

// SyncConfig mocks base method.
func (m *MockSyncManager) SyncConfig(arg0 alertops.ConfigReconciler_SyncConfigServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncConfig indicates an expected call of SyncConfig.
func (mr *MockSyncManagerMockRecorder) SyncConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncConfig", reflect.TypeOf((*MockSyncManager)(nil).SyncConfig), arg0)
}

// Targets mocks base method.
func (m *MockSyncManager) Targets() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Targets")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Targets indicates an expected call of Targets.
func (mr *MockSyncManagerMockRecorder) Targets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Targets", reflect.TypeOf((*MockSyncManager)(nil).Targets))
}

// mustEmbedUnimplementedConfigReconcilerServer mocks base method.
func (m *MockSyncManager) mustEmbedUnimplementedConfigReconcilerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedConfigReconcilerServer")
}

// mustEmbedUnimplementedConfigReconcilerServer indicates an expected call of mustEmbedUnimplementedConfigReconcilerServer.
func (mr *MockSyncManagerMockRecorder) mustEmbedUnimplementedConfigReconcilerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedConfigReconcilerServer", reflect.TypeOf((*MockSyncManager)(nil).mustEmbedUnimplementedConfigReconcilerServer))
}
